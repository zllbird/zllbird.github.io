<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on Coder-bird</title>
    <link>https://zllbird.github.io/categories/android/</link>
    <description>Recent content in Android on Coder-bird</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2015 Copyright Text</copyright>
    <lastBuildDate>Thu, 14 Jan 2016 18:20:35 +0800</lastBuildDate>
    <atom:link href="https://zllbird.github.io/categories/android/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>【Android】使用Gradle进行配置</title>
      <link>https://zllbird.github.io/2016/01/14/android%E4%BD%BF%E7%94%A8gradle%E8%BF%9B%E8%A1%8C%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Thu, 14 Jan 2016 18:20:35 +0800</pubDate>
      
      <guid>https://zllbird.github.io/2016/01/14/android%E4%BD%BF%E7%94%A8gradle%E8%BF%9B%E8%A1%8C%E9%85%8D%E7%BD%AE/</guid>
      <description>

&lt;h2 id=&#34;android-使用gradle进行配置-记录:b2d32e58210a46d52cedf8f96f12aada&#34;&gt;【Android】使用Gradle进行配置（记录）&lt;/h2&gt;

&lt;h3 id=&#34;摘要:b2d32e58210a46d52cedf8f96f12aada&#34;&gt;摘要&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;介绍&lt;/li&gt;
&lt;li&gt;需求&lt;/li&gt;
&lt;li&gt;配置工程&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;概念介绍:b2d32e58210a46d52cedf8f96f12aada&#34;&gt;概念介绍&lt;/h3&gt;

&lt;p&gt;直接推荐几篇文章入门。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://android.jobbole.com/81436/&#34;&gt;深入理解Android的Gradle&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://pkaq.github.io/gradledoc/docs/userguide/userguide.html&#34;&gt;Gradle 用户手册（含部分翻译）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ADT已经不在继续更新了。自然而然的，Android Studio成了新贵。虽说还是有一些别的IDE和别的方式去编写和构建Android，但由于谷歌的维护和升级，AS成了绝大多数Android开发者的选择。对于小团队来说（本人就是在小小小团队），AS + GRADLE 成了现阶段主流。&lt;/p&gt;

&lt;p&gt;这是记录，所以概念型的东西就不做介绍了。&lt;/p&gt;

&lt;h3 id=&#34;需求:b2d32e58210a46d52cedf8f96f12aada&#34;&gt;需求&lt;/h3&gt;

&lt;p&gt;由于团队本身有好多服务器（*开发，灰度，线上*），再加上有很多三方的引用（如：我们团队IM引用了环信），另外还有一些日志系统的调控等，再加上长时间不同人员对代码开发，导致这些配置非常混乱，散落于不同的类，还有一些在&lt;code&gt;AndroidManifies.xml&lt;/code&gt;等文件中，所以导致导报经常会出现一些莫名其妙的错误。&lt;/p&gt;

&lt;p&gt;需求：实现 &amp;gt; 能合理地配置这些，并使用配置文件进行统一管理 &amp;gt;的需求。&lt;/p&gt;

&lt;p&gt;目标如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;只需更改一处（一行）就能实现不同需求打包的切换！（最重要）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;简单&lt;/li&gt;
&lt;li&gt;不影响Studio相关联的&lt;code&gt;gradle&lt;/code&gt;文件（&lt;code&gt;build.gradle&lt;/code&gt;一旦改变，就会导致重新编译），但又可以及时更改相关配置。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;配置工程:b2d32e58210a46d52cedf8f96f12aada&#34;&gt;配置工程&lt;/h3&gt;

&lt;h4 id=&#34;配置-buildconfig:b2d32e58210a46d52cedf8f96f12aada&#34;&gt;配置&lt;code&gt;BuildConfig&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;BuildConfig&lt;/code&gt; 这个类是工程自动构建生成的。可以具体看一下这个类。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;/**
 * Automatically generated file. DO NOT MODIFY
 */
package ****;

public final class BuildConfig {
  public static final boolean DEBUG = Boolean.parseBoolean(&amp;quot;true&amp;quot;);
  public static final String APPLICATION_ID = &amp;quot;**.builddemo&amp;quot;;
  public static final String BUILD_TYPE = &amp;quot;debug&amp;quot;;
  public static final String FLAVOR = &amp;quot;&amp;quot;;
  public static final int VERSION_CODE = 1;
  public static final String VERSION_NAME = &amp;quot;1.0&amp;quot;;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注释说：这个类是自动生成的，别动，动了也没什么用~~~&lt;/p&gt;

&lt;p&gt;然后可以看到，这里&lt;code&gt;DEBUG&lt;/code&gt;,&lt;code&gt;APPLICATION_ID&lt;/code&gt;,&lt;code&gt;BUILD_TYPE&lt;/code&gt;,&lt;code&gt;FLAVOR&lt;/code&gt;,&lt;code&gt;VERSION_CODE&lt;/code&gt;,&lt;code&gt;VERSION_NAME&lt;/code&gt;这些常量，这些常量有的是我们在&lt;code&gt;AndroidManifest.xml&lt;/code&gt;中配置的，有些是我们在module下的&lt;code&gt;build.grade&lt;/code&gt;中配置的（当然，这些其实全部可以在&lt;code&gt;build.gradle&lt;/code&gt;中进行配置）&lt;/p&gt;

&lt;p&gt;就像这个样子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;android {
    compileSdkVersion 23
    buildToolsVersion &amp;quot;23.0.2&amp;quot;

    defaultConfig {
        applicationId &amp;quot;**.builddemo&amp;quot;
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 1
        versionName &amp;quot;1.0&amp;quot;
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-	rules.pro&#39;
        }
    }

    productFlavors {
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于工程中需要&lt;code&gt;versionCode&lt;/code&gt;参数，所以&lt;code&gt;BuildConfig&lt;/code&gt;便提供了很大的便利。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip: defaultConfig{} 这个闭包就是配置工程参数的，也就是直接对应&lt;code&gt;BuildConfig&lt;/code&gt;的&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;既然如此，如果能给&lt;code&gt;BuildConfig&lt;/code&gt;配置自定义的参数，那么需求就解决了一半了！&lt;/p&gt;

&lt;p&gt;显然，Android团队也肯定会留下一些自定义的API，保证大家能  “ 随便乱搞”。&lt;/p&gt;

&lt;p&gt;下面是自定义API写法和使用&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;defaultConfig {
  
       ...
  
		// 自定义的方法就是 buildConfigField ，这种是groovy写法
        // 三个参数分别是 type (类型) ， name (命名) ， value(值)
        buildConfigField &#39;int&#39; , &#39;SEVER_CONFIG&#39; , &amp;quot;1&amp;quot;
  		
  		// 当然写成这种更容易看懂,这种写法更像java。
  		// 三个参数分别是 type (类型) ， name (命名) ， value(值)
  		buildConfigField(&amp;quot;int&amp;quot; , &amp;quot;SEVER_CONFIG&amp;quot; , &amp;quot;1&amp;quot;)
  
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重新构建后，可以看到&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public final class BuildConfig {
  public static final boolean DEBUG = Boolean.parseBoolean(&amp;quot;true&amp;quot;);
  public static final String APPLICATION_ID = &amp;quot;**.builddemo&amp;quot;;
  public static final String BUILD_TYPE = &amp;quot;debug&amp;quot;;
  public static final String FLAVOR = &amp;quot;&amp;quot;;
  public static final int VERSION_CODE = 1;
  public static final String VERSION_NAME = &amp;quot;1.0&amp;quot;;
  // Fields from default config.
  public static final int SEVER_CONFIG = 1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到&lt;code&gt;int SEVER_CONFIG = 1;&lt;/code&gt; 正好对应 &lt;code&gt;&#39;int&#39; , &#39;SEVER_CONFIG&#39; , &amp;quot;1&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注意， “1” 对应的是 1 ， ’ “1” ‘ 对应的是 “1”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;是不是很简单。&lt;/p&gt;

&lt;p&gt;简单看一下原理吧。&lt;/p&gt;

&lt;p&gt;原来是本身构建的时候，android会将闭包转化成相关类，并调用方法。可以看一下&lt;code&gt;buildConfigField&lt;/code&gt;这个方法&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// -- DSL Methods. TODO remove once the instantiator does what I expect it to do.

    /**
     * Adds a new field to the generated BuildConfig class.
     *
     * The field is generated as:
     *
     * &amp;lt;type&amp;gt; &amp;lt;name&amp;gt; = &amp;lt;value&amp;gt;;
     *
     * This means each of these must have valid Java content. If the type is a String, then the
     * value should include quotes.
     *
     * @param type the type of the field
     * @param name the name of the field
     * @param value the value of the field
     */
    public void buildConfigField(
            @NonNull String type,
            @NonNull String name,
            @NonNull String value) {
        ClassField alreadyPresent = getBuildConfigFields().get(name);
        if (alreadyPresent != null) {
            String flavorName = getName();
            if (BuilderConstants.MAIN.equals(flavorName)) {
                logger.info(
                        &amp;quot;DefaultConfig: buildConfigField &#39;{}&#39; value is being replaced: {} -&amp;gt; {}&amp;quot;,
                        name, alreadyPresent.getValue(), value);
            } else {
                logger.info(
                        &amp;quot;ProductFlavor({}): buildConfigField &#39;{}&#39; &amp;quot;
                                + &amp;quot;value is being replaced: {} -&amp;gt; {}&amp;quot;,
                        flavorName, name, alreadyPresent.getValue(), value);
            }
        }
        addBuildConfigField(AndroidBuilder.createClassField(type, name, value));
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这是&lt;code&gt;ProductFlavor&lt;/code&gt;这个类里的方法，不详细说了，大家其实直接看注释就ok了。&lt;/p&gt;

&lt;h4 id=&#34;解决-androidmanifest-xml-的-meta-data-等:b2d32e58210a46d52cedf8f96f12aada&#34;&gt;解决&lt;code&gt;AndroidManifest.xml&lt;/code&gt;的&lt;code&gt;Meta-data&lt;/code&gt;等&lt;/h4&gt;

&lt;p&gt;拿&lt;code&gt;AndroidManifest.xml&lt;/code&gt;的&lt;code&gt;Meta-data&lt;/code&gt;出来说，其实别的字段也是一样的。&lt;/p&gt;

&lt;p&gt;还是&lt;code&gt;build.gradle&lt;/code&gt;中的配置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;defaultConfig {
    applicationId &amp;quot;zhulonglong.builddemo&amp;quot;
    minSdkVersion 15
    targetSdkVersion 23
    versionCode 1
    versionName &amp;quot;1.0&amp;quot;

    buildConfigField &#39;int&#39; , &#39;SEVER_CONFIG&#39; , &amp;quot;1&amp;quot;
    manifestPlaceholders = [ CHANNEL_VALUE : &amp;quot;QQ&amp;quot; ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对应的&lt;code&gt;AndroidManifest.xml&lt;/code&gt;的&lt;code&gt;Meta-data&lt;/code&gt;数据是&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;application
        android:allowBackup=&amp;quot;true&amp;quot;
        android:icon=&amp;quot;@mipmap/ic_launcher&amp;quot;
        android:label=&amp;quot;@string/app_name&amp;quot;
        android:supportsRtl=&amp;quot;true&amp;quot;
        android:theme=&amp;quot;@style/AppTheme&amp;quot;&amp;gt;

       ...
        &amp;lt;meta-data android:name=&amp;quot;CHANNEL&amp;quot;
                   android:value=&amp;quot;${CHANNEL_VALUE}&amp;quot;/&amp;gt;
&amp;lt;/application&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;${}&lt;/code&gt;是替代符，在&lt;code&gt;defaultConfig&lt;/code&gt;中&lt;code&gt;manifestPlaceholders&lt;/code&gt;便是对应的AndroidManifest.xml配置文件。&lt;/p&gt;

&lt;h4 id=&#34;合并-新建-config-gradle-统一管理所有的配置:b2d32e58210a46d52cedf8f96f12aada&#34;&gt;合并，新建&lt;code&gt;config.gradle&lt;/code&gt;统一管理所有的配置&lt;/h4&gt;

&lt;p&gt;创建一个&lt;code&gt;config.gradle&lt;/code&gt;的好处：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;无缝衔接&lt;code&gt;gradle&lt;/code&gt;构建系统&lt;/li&gt;
&lt;li&gt;android studio 方便查看更改，且不会引起重新构建（IDE 自动识别的都是&lt;code&gt;build.gradle&lt;/code&gt;文件，对于别的gradle文件不会在乎）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我创建的&lt;code&gt;config.grade&lt;/code&gt;是在项目根录下的。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;
def DEV = 0
def ONLINE = 2

ext{
    SEVER_CONFIG = ONLINE
    CHANNEL_DEV = &amp;quot;CHANNEL_DEV&amp;quot;
    CHANNEL_ONLINE = &amp;quot;CHANNEL_ONLINE&amp;quot;

    if (SEVER_CONFIG == DEV){
        CHANNEL_NAME = CHANNEL_DEV
    }else {
        CHANNEL_NAME = CHANNEL_ONLINE
    }

}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ext&lt;/code&gt;保证了别的&lt;code&gt;gradle&lt;/code&gt;能顺利使用这个属性&lt;/p&gt;

&lt;p&gt;在需要的&lt;code&gt;build.gradle&lt;/code&gt;中导入&lt;code&gt;config.gradle&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;apply from: rootProject.getRootDir().getAbsolutePath() + &amp;quot;/config.gradle&amp;quot;

println &amp;quot;Project Name &amp;quot; + getName()
println &amp;quot;Project Path &amp;quot; + getPath()

android {
    compileSdkVersion 23
    buildToolsVersion &amp;quot;23.0.2&amp;quot;

    defaultConfig {
        applicationId &amp;quot;**.builddemo&amp;quot;
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 1
        versionName &amp;quot;1.0&amp;quot;

        buildConfigField &#39;int&#39; , &#39;SEVER_CONFIG&#39; , &amp;quot;${SEVER_CONFIG}&amp;quot;

        manifestPlaceholders = [ CHANNEL_VALUE : &amp;quot;${CHANNEL_NAME}&amp;quot; ]

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;
        }
    }

    productFlavors {


    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后就可以直接引用这个属性了。&lt;/p&gt;

&lt;p&gt;如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;buildConfigField &#39;int&#39; , &#39;SEVER_CONFIG&#39; , &amp;quot;${SEVER_CONFIG}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;SEVER_CONFIG&lt;/code&gt;就是在&lt;code&gt;config.gradle&lt;/code&gt;中定义的。&lt;/p&gt;

&lt;p&gt;到此为止，目的达到了。&lt;/p&gt;

&lt;p&gt;所有的配置都在文件&lt;code&gt;config.gradle&lt;/code&gt;中进行更改。当然，还需要在里面定义一个总开关，将具体参数配置分块。&lt;/p&gt;

&lt;p&gt;在代码中可以直接使用&lt;code&gt;BuildConfig&lt;/code&gt;进行相关使用。&lt;/p&gt;

&lt;p&gt;当然，更改&lt;code&gt;config.gradle&lt;/code&gt;不会进行重新构建，是不是棒棒哒！！！&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
  </channel>
</rss>