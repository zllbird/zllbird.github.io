<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coder-bird</title>
    <link>https://zllbird.github.io/</link>
    <description>Recent content on Coder-bird</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2015 Copyright Text</copyright>
    <lastBuildDate>Wed, 31 Aug 2016 18:42:34 +0800</lastBuildDate>
    <atom:link href="https://zllbird.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>最好的时代，最差的十点</title>
      <link>https://zllbird.github.io/2016/08/31/%E6%9C%80%E5%A5%BD%E7%9A%84%E6%97%B6%E4%BB%A3%E6%9C%80%E5%B7%AE%E7%9A%84%E5%8D%81%E7%82%B9/</link>
      <pubDate>Wed, 31 Aug 2016 18:42:34 +0800</pubDate>
      
      <guid>https://zllbird.github.io/2016/08/31/%E6%9C%80%E5%A5%BD%E7%9A%84%E6%97%B6%E4%BB%A3%E6%9C%80%E5%B7%AE%E7%9A%84%E5%8D%81%E7%82%B9/</guid>
      <description>

&lt;h2 id=&#34;我们在最好的年代-也在最坏的年代:76dccf323cada3697dcb5e62c77a5daa&#34;&gt;我们在最好的年代，也在最坏的年代&lt;/h2&gt;

&lt;p&gt;两个对话，一是老友好久未见，坐一起喝酒。二十，下班回家路上地铁里和同事的闲聊。&lt;/p&gt;

&lt;p&gt;喝的是简单的哈啤，聊些乱七不糟的。哥们突然问：
“老诸，你说人为什么要奋斗呢？”
我沉默了好久，“为了活着”
“能不能不拽文&amp;hellip;说认真的”
“那难道等死啊”
“这和死有毛线关系，快点说认真的”
“那和咸鱼有什么区别？”
“说不过你，喝酒喝酒”&lt;/p&gt;

&lt;p&gt;晚上八点多，对于北京这个城市，大多人才刚刚下班。地铁擦着时间线，一站一站的开着。一个同事突然问：
“诶，你说，女人应不应该奋斗？”
我又是沉默了好久，“不应该”
“我有个朋友，她&amp;hellip;她就觉得，这样过挺好，不想折腾”
“&amp;hellip;我还是说，不应该”
“我觉得不行，我肯定受不了&amp;hellip;我一定要&amp;hellip;”
“&amp;hellip;”&lt;/p&gt;

&lt;h3 id=&#34;奋斗:76dccf323cada3697dcb5e62c77a5daa&#34;&gt;奋斗？&lt;/h3&gt;

&lt;p&gt;想来想去，大概就是这样吧。
如果有人问你，为什么要去奋斗。就告诉他，想那么多干嘛？不去拼，难道耗着等死啊。
但如果有人问你，应不应该。就告诉他，不应该，未来的任何一个时刻，你都会感觉付出是大于收获的。
&lt;strong&gt;是不是很不负责？&lt;/strong&gt;
唉，没办法，人终究还是要自己活不是吗？&lt;/p&gt;

&lt;p&gt;说点，反鸡汤的文字。
哥们问我，为什么很努力了，却只比那些懒蛋们好那么一点点？
我一下子没忍住，噗的，笑了粗来。
“我说，你比别人好那么一点点已经足够你乐呵了的，你还在这抱怨啥？”
哥们瞪着大眼，很不甘心。
“大多数人，就算很努力，仍然不会感觉比那些人好一点或者高一点的。你有这种感觉，已经说明你很优秀了，少年！”
听到表扬后，哥们总算有点脸，继续问，“那是不是还要再狠狠心，更努努力”
“绝大多数人，都是平凡的，不对，都是平庸的。平庸不仅仅是一个宽度的问题，可以这么说，你50分，平庸，60分，平庸，80分，还是平庸&amp;hellip;”
哥们忍不住插嘴打断了我，“***（骂人的话省略之），老子就弄到100分。”
我笑了笑，“100分，也是平庸，150分也是平庸，500分，也是平庸&amp;hellip;”
“我去，那多少才算不平庸啊！”
“10000左右吧，10000大概能算得上优秀，至于再往上的，那就很少了，我们很可能拼劲全力，也就500来分吧。”
哥们似乎又不甘心了，“那照你这么说，怎样才能到10000分，甚至更高？”
“靠运气咯”
“&amp;hellip;”
“靠家庭出身，靠背景，靠关系，靠不小心中了彩票，靠一不小心&amp;hellip;”
“停停停，你这太反鸡汤了，这说的，我还这么拼命干嘛？”
“哈哈，是呀，你很努力很努力，只会比别人过的好那么一点点，你一天天无所事事，也只会比别人过的差那么一点点，你何必这么努力呢？”
“&amp;hellip;额，你不往回拉啊，就这么应了啊，我囧，这对话还能继续吗？那你说，你为啥也这么努力？”
“我们在最好的年代，也在最坏的年代！”&lt;/p&gt;

&lt;h3 id=&#34;这是最好的时代-也是最坏的时代:76dccf323cada3697dcb5e62c77a5daa&#34;&gt;这是最好的时代，也是最坏的时代&lt;/h3&gt;

&lt;p&gt;“额&amp;hellip;又拽文了，啥意思啊？为啥要努力啊！”
“活着就是为了改变世界！”
“你够了&amp;hellip;你醒醒，你不是乔布斯。”
“努力这东西嘛，不要用来比，就算比，和自己比。往大的说，就是为了改变世界，哪怕只有那么一点点不起眼的改变，我也渴望去做啊，活着不仅仅有生活，还有梦想。”
“别扯那么远的，往小的说，别老往大的说”
“这是最好的时代！”
“&amp;hellip;你是不是不知道怎么回答，每次问你，都最好的时代。”
“被你看穿了&amp;hellip;”
哥们瞪着大眼看我，“&amp;hellip;”
“我没有为了一个确定的答案，只想努力的活，不一样的活，仅此而已”&lt;/p&gt;

&lt;p&gt;就算，只好那么一点点。我也已经满足了，不是吗？&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>旅程</title>
      <link>https://zllbird.github.io/2016/07/03/%E6%97%85%E7%A8%8B/</link>
      <pubDate>Sun, 03 Jul 2016 16:40:13 +0800</pubDate>
      
      <guid>https://zllbird.github.io/2016/07/03/%E6%97%85%E7%A8%8B/</guid>
      <description>

&lt;h1 id=&#34;旅程:67f365767fb549aea5e954da885d342b&#34;&gt;旅程&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;你说人生就像那旅程，谁知道转弯后的风光。
雨后就有天晴，泪水后见阳光。No matter rain and tears&amp;hellip;
《旅程》羽泉&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;再遇见:67f365767fb549aea5e954da885d342b&#34;&gt;再遇见&lt;/h3&gt;

&lt;p&gt;上个月，路过济南。本着去一个城市坑一个老友的原则，到了之后，二话不说，进了宝林的店，坑吃坑喝。他从一个咖啡店的老板变成了一个掌大勺的厨子，虽然文艺气质并没有减少，但抡着大刀，霍霍哈嘿的文艺青年，毕竟还是少见。&lt;/p&gt;

&lt;p&gt;进了店，被忽如其来的花震惊了一下。似乎，每一次和他见面，就会有些不一样。但如果细细梳理，似乎又是这般。大概是又被生活晒黑了吧。哈哈！小小的吧台，比较窄也比较长，木头的，感觉比较亲切，大概我还是更喜欢木头比石头多一点吧。吧台后面是只有一层的木柜，琳琅满目的杯子和酒，对于一个爱小酌的人，看着真是一种享受&amp;hellip;&lt;/p&gt;

&lt;p&gt;&amp;hellip;
“诸，老诸，你走神啦&amp;hellip;”
“看后面的柜子呢，你刚才说啥？”
“都到济南了，不去个景点转转”
“不去了，一会儿，出去在巷子里走走就行了。”
&amp;hellip;&lt;/p&gt;

&lt;p&gt;年轻的时候，我每走一个地方，风风火火的。恨不得，两三天，跑遍了所有的景观，大山大江，楼阁宫殿，大都显得过于匆匆。现在懒了，去一个地方，大都是因为要见几个好友，聊几句人生或者牢骚几句生活。然后，假装成本地人，去不知名的公园遛弯，去路边吃说不上正宗不正宗的特色。再然后，在另一张床上醒来，拉开窗帘，看一眼和北京不一样的早晨。或许，现在的自己不像是旅行，只是为了一段故事罢了。&lt;/p&gt;

&lt;p&gt;厨子爱上了做酒，五月的时候做了一个叫五月的酒，六月再做一个叫六月的，大概厨子只是喜欢做酒，不喜欢取名，所以取名显得很随意。然后，宝林（就是那个厨子）还说，&lt;strong&gt;六月要做一个叫六月的酒，还要做一款叫夏至的茶。&lt;/strong&gt;然后，猛地被这名字套住了，酒名六月，是说炽烈，茶名夏至，道的是那抹清凉，我没有尝到夏至，猜想或许里面有柠檬。大概文艺就是这样吧，太过于诗情画意反而有点浮夸，没有那么多内涵，反倒是经得起来回品味。&lt;/p&gt;

&lt;p&gt;女朋友絮叨说：你想多了，只是任性的取个名字罢了。我笑了笑，是呀，太任性了。厨子也想多挣钱，哈哈，大概没有人会不想多挣钱。但厨子更想，开开心心的挣钱，挣自己喜欢的事情的钱，挣自己看的上的人的钱&amp;hellip;这个厨子真的是太过于任性了！我转过头，对女友说，这样的厨子，估计是挣不出好几个亿了。女友笑了一下，然后问我，重要吗？&lt;/p&gt;

&lt;p&gt;我见过很多活的很开心的人，也见过很多活的很任性的人。但这个厨子，大概是我见过的任性的那些人中，最开心的吧。想了想，这个厨子，大概不是在做生意。而是在做一个故事。&lt;/p&gt;

&lt;p&gt;再见，再遇见。&lt;/p&gt;

&lt;h3 id=&#34;安静如海:67f365767fb549aea5e954da885d342b&#34;&gt;安静如海&lt;/h3&gt;

&lt;p&gt;离开济南后，便回了威海。一个好小好小的城市，但这么小的城市，却厚着脸皮，三面临海。文艺的说法就是，一不小心，便走到了大陆尽头，而眼前是，无尽的大海。&lt;/p&gt;

&lt;p&gt;下了高铁之后，还未出站，我便对女友说。接我们的人是狐狸和他媳妇，很好找，最瘦的男人。女朋友笑着说，比你以前还瘦？我却一本正经的对比了一下，说：不分上下。&lt;/p&gt;

&lt;p&gt;回威海后，这些伙计们。这么文明的形容他们，自己都觉得有点怪怪的，还是说这群牲口们，我完全可以写一个系列来慢慢讲他们，当然，正在写，系列名字可以透露一下，叫饲养记——论牲口是如何成长的。（我估计，这个题目放出去，我已经被打死好几次了）&lt;/p&gt;

&lt;p&gt;旅程中，最享受的事情，大概就是，在另一张床上醒来，然后，没有压力，没有任务，什么都没有，享受。但最最享受的，大概还是醒来后，就能看到一片海。单车或者徒步，在太阳没醒之前出门，漫步海边，听那亘古不变的鼻息，那片蔚蓝浮浮沉沉，日出&amp;hellip;&lt;/p&gt;

&lt;p&gt;大海是治愈的，所以，心情不好的时候，来来海边。我一直认为大海之所以能治愈，是因为它总能使人安静。虽然我很努力的去写，但似乎总是很难写出站在海边的那种感觉。只能说，那种感觉太简单，太安静，没有什么起伏，反倒是很难用文字描绘了。&lt;/p&gt;

&lt;p&gt;在一对新婚夫妇的新房里，吃了顿海鲜大宴。然后，六个人围着打打扑克，唠唠嗑。时间在茶几上慢慢流走，当然，饮料加水果，茶兑时光。&lt;/p&gt;

&lt;p&gt;旅行。走很多很多路，去见不一样的风景。
旅程。走很多很多路，但不在乎风景，更在乎人。或者，我们只是换了一个地方，吃饭，打牌，喝茶~&lt;/p&gt;

&lt;h3 id=&#34;末了:67f365767fb549aea5e954da885d342b&#34;&gt;末了&lt;/h3&gt;

&lt;p&gt;末了，想起两句。忘了哪里看到的，也算是鸡汤吧。偷个懒，直接拿鸡汤结尾。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;最终我们还是应该，“读万卷书，行万里路”。
如果只读书，不走走，最终不过是个书匠。
如果不读书，行万里路也不过是个邮差。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>VPN</title>
      <link>https://zllbird.github.io/2016/06/22/vpn/</link>
      <pubDate>Wed, 22 Jun 2016 01:46:13 +0800</pubDate>
      
      <guid>https://zllbird.github.io/2016/06/22/vpn/</guid>
      <description>

&lt;h2 id=&#34;vpn-vps:8b802a07289a50a309ec4f2889b43c33&#34;&gt;VPN，VPS&lt;/h2&gt;

&lt;h3 id=&#34;需自己安装配置客户端:8b802a07289a50a309ec4f2889b43c33&#34;&gt;需自己安装配置客户端&lt;/h3&gt;

&lt;p&gt;引子：我（诸隆隆），总被朋友要求推荐VPN，所以自己搭建了一个VPS(你可以理解为一个VPN服务)，方便我的朋友翻墙使用google和facebook之类的软件。使用的*引擎*是clowwindy大神的shadowsocks，（clowwindy大神被ZF请去喝茶后，shadowsocks再也没有更新过&amp;hellip;好可惜）。&lt;/p&gt;

&lt;p&gt;这是我自己搭建的vps，提供给我的朋友使用，请勿转给其他人使用，每月的流量共计有10G，过后非常昂贵，如果流量预警，我会关闭服务器，所以请节约使用!&lt;/p&gt;

&lt;p&gt;节点是&lt;strong&gt;东京&lt;/strong&gt;的VPS，网速经过测试一般在200~300ms延迟。可以理解为网页浏览不会有问题，玩游戏和看视频会有卡顿，高清视频必定卡，（请不要看高清视频，会死人的）。&lt;/p&gt;

&lt;p&gt;我搭建的 VPN 系统不同于常见的 PPTP L2TP 等隧道技术, 而是使用加密的 Socket 通信, 不容易被墙, 但是需要自己安装客户端使用。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;我的 Shadowsocks 帐号:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;服务器 IP : 54.199.227.151&lt;/p&gt;

&lt;p&gt;端口号 : 8333&lt;/p&gt;

&lt;p&gt;加密方式 : aes-256-cfb&lt;/p&gt;

&lt;p&gt;密码 : （下面的是密码，注意前后端没有空格）&lt;/p&gt;

&lt;p&gt;zll!@#vps$%^mm&amp;amp;*&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;如果服务器都不能正常使用，可能被防火墙封住等原因。可以直接联系我(诸隆隆，qq:784537229)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;mac-下的配置方式:8b802a07289a50a309ec4f2889b43c33&#34;&gt;&lt;strong&gt;Mac 下的配置方式&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;下载并安装 ShadowsocksX, 在 QQ 群共享文件中, 文件名为 ShadowsocksX-2.6.3.dmg&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;安装后运行, 在弹出窗口，点击&lt;code&gt;+&lt;/code&gt;新增服务器配置, 按照上面提供的信息完成配置并保存&lt;/li&gt;
&lt;li&gt;系统右上角会出现一个飞机图标, 点击该图标, 确保服务器选中刚才配置好的(前面打对勾), 代理策略选择自动代理(前面打对勾). 这样即完成 vpn 的配置.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;该工具的自动代理使用了 gfwlist, 可以自动判断访问的地址是否需要翻墙. 配置完成后可以尝试打开 &lt;a href=&#34;https://www.facebook.com/&#34;&gt;facebook&lt;/a&gt; 和 &lt;a href=&#34;http://www.xiami.com/&#34;&gt;虾米音乐&lt;/a&gt;, 如果二者都能正常打开, 说明可以成功翻墙.&lt;/p&gt;

&lt;h3 id=&#34;windows-下的配置方式:8b802a07289a50a309ec4f2889b43c33&#34;&gt;&lt;strong&gt;Windows 下的配置方式&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;下载并安装 shadowsocks-win, 在 QQ 群共享文件中.&lt;/p&gt;

&lt;p&gt;Win 7 及以下 下载  Shadowsocks-win-2.4.zip&lt;/p&gt;

&lt;p&gt;Win 8 / 10及以上 下载  Shadowsocks-win-dotnet4.0-2.5.2.zip&lt;/p&gt;

&lt;p&gt;下载解压后可直接运行. 配置大致流程参考上一节中 Mac 下的配置方式. 如果有问题可以联系我&lt;/p&gt;

&lt;h3 id=&#34;iphone-下的配置-已失效-iphone用户我正在想办法:8b802a07289a50a309ec4f2889b43c33&#34;&gt;&lt;strong&gt;iPhone 下的配置 （已失效，iPhone用户我正在想办法）&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;在苹果商店下载 Shadowsocks.&lt;/p&gt;

&lt;p&gt;安装后的配置参考&lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-iOS&#34;&gt;官方文档&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;注意在 iPhone 下, 配置全局翻墙并将 shadowsocks 切到后台后, 只能保持链接十分钟左右, 之后需要重新切到 shadowsocks 将其唤醒, 就能自动链接上了. 这是 &lt;strong&gt;iOS系统&lt;/strong&gt; 的限制.&lt;/p&gt;

&lt;p&gt;如果是使用 Shadowsocks 工具中自带的浏览器翻墙浏览网页, 则不会有这个问题.&lt;/p&gt;

&lt;h3 id=&#34;android-下的配置:8b802a07289a50a309ec4f2889b43c33&#34;&gt;&lt;strong&gt;Android 下的配置&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;下载并安装 Shadowsocks-android.（用googleplay可以直接下，我正在做安装包，预计下个周能和大家见面）&lt;/p&gt;

&lt;p&gt;安装后填写服务器配置, 路由设置为 全局,  打开服务即可使用了.&lt;/p&gt;

&lt;p&gt;安卓不会存在 IOS 那样的链接时间限制.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>夏至</title>
      <link>https://zllbird.github.io/2016/06/22/%E5%A4%8F%E8%87%B3/</link>
      <pubDate>Wed, 22 Jun 2016 01:46:13 +0800</pubDate>
      
      <guid>https://zllbird.github.io/2016/06/22/%E5%A4%8F%E8%87%B3/</guid>
      <description>

&lt;h1 id=&#34;夏至:a5ba64e5f442b6963adba49224fa6530&#34;&gt;夏至&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;回到家
 把自己卸下
 放进冰箱&lt;/p&gt;

&lt;p&gt;疲倦和惆怅
 威士忌和时光
 ——飞鸟&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;​   拿着勺子从冰箱里抱出半个西瓜，然后在阳台上，随便踢了一个垫子，盘着腿好不容易的坐了下去。一下子，绷着很久的神经也放松了下去。&lt;/p&gt;

&lt;p&gt;​   已经接近凌晨一点，外面的灯光恍恍惚惚的，很多，但却都显得很昏黄，那种很沉的颜色，像是被黑夜吃着，挣扎着。&lt;/p&gt;

&lt;p&gt;​   放一首李荣浩的老街，声音调的很大，却不知道为什么，仍然是感觉很静。错了错了，重说重说：大半夜的，本来就有一种让人很不舒服的静，本想着放放歌，会好那么一点点，但似乎恰恰相反，歌没有打破夜的这份静，反倒是让夜显得更加深邃。一眼望去，不知尽头，不知方向。&lt;/p&gt;

&lt;p&gt;​   &lt;strong&gt;我似乎又多添了一分恐惧和不安。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;​   摇摇头，不去想，不去想。&lt;/p&gt;

&lt;p&gt;​   狠狠的挖一口西瓜，张着大口，狠狠狠狠的咬上一口。结果下个瞬间，又只能全部吐到垃圾桶里——馊了。我举着西瓜，坐在垃圾桶边上。不甘心也没有办法，手一松，西瓜咚咚的掉进了垃圾桶里。我抿抿嘴，仍然是没控制的叹了一口气。&lt;/p&gt;

&lt;p&gt;​   胳膊压着盘着的大腿上，手托着腮帮贴在玻璃上，我凝望着黑夜与灯光，什么都不去想，什么也不愿去想。总是想太多事情，让人好累，总是不自觉的想太多事情，让人有种无可奈何的惆怅。脸贴着玻璃，有点凉，眼睛看着深夜，有点慌张。&lt;/p&gt;

&lt;p&gt;​   &lt;strong&gt;我似乎又多添了一分迷茫和惆怅。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;p&gt;​   坐了一会儿，还是忍不住。拿出了威士忌，浅浅的倒上了一杯，学做李白。夏至，白天最长，黑夜最短。或许，这杯还未饮尽，天就亮了。我又要背上行囊，奔波于那有点太远的梦想。只是努力这东西&amp;hellip;&lt;/p&gt;

&lt;p&gt;​   再然后，酒还未酣，肚子却先不争气。咕噜咕噜的叫着，饿了。拖着身子，又翻一遍冰箱。后悔自己没有备上几包泡面，或几根火腿。幸运的是，还找到几包饼干，不幸的是，似乎只剩下了几包饼干。&lt;/p&gt;

&lt;p&gt;​   &lt;strong&gt;我似乎又多添了一分道不明的悲伤。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;p&gt;​   再再然后，我干脆躺在地板上，斜着头，望着天。很深很深的黑，没有月光，也没有星光。我试图找寻，努力的找寻，可笑的是因为念起一首歌，夜空中最亮的星——“每当我找不到存在的意义，每当我迷失在黑夜里。”然后，我发觉，不仅童话里是骗人的，歌曲里也是。&lt;/p&gt;

&lt;p&gt;​   第二次，我没忍住，又叹了一口气。地板好硬。疲倦开始蔓延，却忘了带着困意，眼睛望着天，心里念着却是时光。&lt;/p&gt;

&lt;p&gt;​   唉&amp;hellip;&lt;/p&gt;

&lt;p&gt;​   &lt;strong&gt;酒已尽，人未眠，夜已央。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;​&lt;br /&gt;
​&lt;/p&gt;

&lt;p&gt;​&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>为什么我们总是没有时间</title>
      <link>https://zllbird.github.io/2016/06/04/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BB%AC%E6%80%BB%E6%98%AF%E6%B2%A1%E6%9C%89%E6%97%B6%E9%97%B4/</link>
      <pubDate>Sat, 04 Jun 2016 17:03:59 +0800</pubDate>
      
      <guid>https://zllbird.github.io/2016/06/04/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BB%AC%E6%80%BB%E6%98%AF%E6%B2%A1%E6%9C%89%E6%97%B6%E9%97%B4/</guid>
      <description>

&lt;h1 id=&#34;为什么我们总是没有时间:b1ba9578e7469d8a9031b8904cebc257&#34;&gt;为什么我们总是没有时间&lt;/h1&gt;

&lt;p&gt;记一次座谈。
时间是什么？当然，这不是物理文章，所以不用时间简史去解释，我们都知道时间是什么，时间是怎么回事儿，也总说时间不可逆，但还是有一些关于时间的东西，我们忽视了&amp;hellip;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;时间是最大最不可能回退的成本，也是最廉价的成本。因为它不可保存，只能使用掉或者浪费掉。一天有24小时，不可能多，也不能少，因为不能存储，所以，你再怎么努力，也只能用24个小时，但你无所事事，也有24个小时去浪费，这就是时间，廉价却不可回退。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;吹嘘完时间，聊点正事儿。为什么总是没有足够的时间完成计划？为什么我们明明没有偷懒，明明很辛苦，却仍旧不能完成计划？如果你也被这两个问题苦恼，不妨坐下来，喝杯茶，聊两句。&lt;/p&gt;

&lt;h3 id=&#34;请先-自私:b1ba9578e7469d8a9031b8904cebc257&#34;&gt;请先‘自私’&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;自己的事情应该永远放在第一位，不关心自己的事情，总做着别人的事情，那么天天喊忙，就是活该！&lt;/strong&gt;
从我看来，任务分两种。一种是创造性的，另外一种是非创造性的。创造性对我来说，就是编程和写作。非创造性的，就是开会，调bug，商量今晚吃什么&amp;hellip;&lt;/p&gt;

&lt;p&gt;简单分开之后，先聊一下创造性的工作。拿编程来讲，我肯定是需要一个完整的，不被打扰，不被切割的时间。（别和我提什么番茄工作法，写程序来了感觉，突然被番茄打扰真的很闹心！）思考是人类非常耗能的工作，而且它不像跑步游泳，那么直观的看到并且反映到身体上。所以，对于思考引发的身体损耗和成本都显得那么隐晦，不容易被发现。举个例子，设想一下，快跑的时候，突然有人把你拦下，然后让你换个姿势继续跑，你会不会当场骂人呢？我估计我会。但你正沉浸在我的思考时，突然被人拦下，然后让你想另一个事情，你会不会当场骂人呢？我估计你不会，但我会。&lt;/p&gt;

&lt;p&gt;当一个人在做创造性工作的时候，往往大脑在高速运转耗能思考。真正沉浸其中的感觉非常好，甚至可以说是可遇而不可求的，即便没有完全沉浸其中，也会将几乎所有的注意力都放在工作上。这个时候被打断，是很可怕的一件事儿，很可能破坏了下一个“iPhone”的诞生！多说一嘴，想起以前的一个同事，很有才，很能干，但却离职了，彼此其实都很可惜，原因大概是因为他始终不懂拒绝，所以总是把自己弄得很累，却也收获不大。他崇尚极客精神，却始终被凡事所累。&lt;/p&gt;

&lt;p&gt;我曾对他说过，拒绝其实是让双方受益的事情。&lt;/p&gt;

&lt;h3 id=&#34;用碎时间处理碎任务:b1ba9578e7469d8a9031b8904cebc257&#34;&gt;用碎时间处理碎任务&lt;/h3&gt;

&lt;p&gt;说完创造性的事情，说说非创造的事情。非创造的事情，让它尽情来。短时间的思考与碰撞往往能迸发更多的创意。但不能从一个角度，永远有着对立的角度。只有对立了，才能怀疑。怀疑是思考的前提，不去辩，哪来的是非对错。&lt;/p&gt;

&lt;p&gt;注意力是有限的，时间是个伪命题。所以，总是可以大事化小，拆分是门艺术。连贯是思考杀手，长时间被打断很可怕。让需要连贯思考的成本降低，让时间变短。先主逻辑，然后小实现。无论啥，总是可以被被拆分的，如果不可以，大多数情况是逻辑并不清晰。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>必然，重混和互动</title>
      <link>https://zllbird.github.io/2016/05/30/%E5%BF%85%E7%84%B6%E9%87%8D%E6%B7%B7%E5%92%8C%E4%BA%92%E5%8A%A8/</link>
      <pubDate>Mon, 30 May 2016 19:50:43 +0800</pubDate>
      
      <guid>https://zllbird.github.io/2016/05/30/%E5%BF%85%E7%84%B6%E9%87%8D%E6%B7%B7%E5%92%8C%E4%BA%92%E5%8A%A8/</guid>
      <description>

&lt;h2 id=&#34;必然-重混和互动:c88345bce496b846535b1a0b38761f7d&#34;&gt;必然,重混和互动&lt;/h2&gt;

&lt;h3 id=&#34;创新不一定是创造:c88345bce496b846535b1a0b38761f7d&#34;&gt;创新不一定是创造&lt;/h3&gt;

&lt;p&gt;一直有个误区，以为创新就是从无到有。必然这章，让我重新定义创新的意思，为了区别我原来对于创新这个词的理解。就先把从无到有的这个过程叫做创造吧。
难道创新不是从无到有吗？不全是，是一部分，准确的讲，应该是一小部分。从无到有是一件很不容易的事情，依我看来，非大能力者和大毅力者不能为之。但创新不仅仅是这部分难的，也有一部分简单的，将已经有的东西，拆分打乱，然后重新组合，重混成一个崭新的事物。不是从无到有，但一样满满的全是新的，这不就是一种创新。
那么，道理谁都会讲，问题是，该怎么做？&lt;/p&gt;

&lt;h3 id=&#34;从目录说起:c88345bce496b846535b1a0b38761f7d&#34;&gt;从目录说起&lt;/h3&gt;

&lt;p&gt;必然书中，给了一个强力的例子，当我读到这的时候，莫得有一种心有戚戚的感觉。目录对于书来首，绝对是伟大的创造。让亿万书目从此有了检索。当然，对于此完全可以写一篇文章专门来歌颂，但今天不是来夸它的。&lt;/p&gt;

&lt;p&gt;如今的网络时代，文字这个载体依然在这个平台上呼啸嘚瑟，但较比千年，它已经出现了形形色色的对手。图片，声音，视频正不断的扩大着，毕竟数字时代，很多以前只能靠文字和书来承接的，现在都可以通过多媒体来，而且更加可观，更加优秀。但即便如此，仍有些东西还未完善，比如目录。&lt;/p&gt;

&lt;p&gt;如果把书对比与电影。那么，目录对于书，什么对于电影呢？关键位置的截图吗？还是预告片？我们读一本书的目录能了解到这本书整体的结构，而电影呢？只看预告片足够吗？或者看关键位置的截图（相信经常看日本爱情动作片的孩子，应该能明白我想说的是什么）？其实不足够，技术还需要发展，文字已经发展到可以通过搜索引擎来检阅目录和关键字来定位到书中的具体位置，可搜索对于图片和视频仍然是进行困难。&lt;/p&gt;

&lt;p&gt;先把困难放在一边。如果google能搜索音乐和电影里的具体内容，我们是否可以想象，当我们需要一个场景的时候，我们告诉google我们想要一个什么场景的片段，然后所有相近和相似的片段都会出现供我选择。想一下还挺兴奋的。&lt;/p&gt;

&lt;h3 id=&#34;时间不可逆吗:c88345bce496b846535b1a0b38761f7d&#34;&gt;时间不可逆吗？&lt;/h3&gt;

&lt;p&gt;时间是最大最不可能回退的成本，也是最廉价的成本。因为它不可保存，只能使用掉或者浪费掉。但反过来想，真的如此吗？数字技术，已经很大程度，或者说，另类的实现了这种替代。编辑文本时时时撤销，从任何一个保存的节点再重新开始写。视频和图片软件同样，游戏软件更加是如此。仍记得，当初玩《仙剑奇侠传》时，挂掉之后就会出现一排字：胜败乃兵家常事，大侠请重新来过吧。时间不可逆，但我们却可以重新来过，我们再改变时间吗？&lt;/p&gt;

&lt;p&gt;时间悖论很多，也太过于光怪陆离，但无论哪个版本，能回看自己的历经，那将是一种什么状体？读书读到这里的时候，我猛地想起来一部英剧——黑镜。&lt;/p&gt;

&lt;h3 id=&#34;vr-虚拟现实-还是从智能说起吧:c88345bce496b846535b1a0b38761f7d&#34;&gt;VR?虚拟现实？还是从智能说起吧&lt;/h3&gt;

&lt;p&gt;这两年VR被炒得太热了，我读到这的时候，没多大热情和兴趣。只有一个小小的猜测，虚拟现实技术，我预想真正带动它发展的，应该是网络色情服务。它是最能带来互动，但却不需要很多智能的互动的行业，我们拭目以待吧。&lt;/p&gt;

&lt;p&gt;互动这章也很有意思，一直在努力提供一种思路。我们使用各种电子设备，达到一种感受。但使用本身是相互的，越进步，就越相互，是一种相互满足的状态。或许，我们一直追求的智能，本来就应该是一种互动的概念，我读一本书时，我遇到一个不懂得词语时，不应该需要我去查询，甚至不需要我用手点一下屏幕，书和屏幕就自动显示这个词语的意思以及维基上的解释。（这并不困难，只要让屏幕读懂我们皱眉，我们抿嘴，我们&amp;hellip;总之，我们总会出现什么被捕捉到）这才是互动，或者，这才配得上智能二字。&lt;/p&gt;

&lt;p&gt;突然间脑洞一点点，人们总是歌舞，歌舞，但总是先有歌，然后编排舞步，有没有一种方式，让我在房间里自由自在的舞动，房间里的设备捕捉到我舞动的感觉，然后出来一首动听配合舞蹈的歌曲呢？&lt;/p&gt;

&lt;p&gt;互动代表它有一种智慧在里面，即便是略显机械的智慧，仍让我们觉得它是活的那种感觉，而这种感觉恰恰就是人们离不开的东西。&lt;/p&gt;

&lt;p&gt;我们头戴着头盔，单靠意识去让我们的机械手臂拿起东西来，更高级的，让我们能隔空取物&amp;hellip;然后，我又在想，如果这样，那么头戴着头盔，让我们能用意识控制电脑，打开文件，移动鼠标，打字&amp;hellip;这两种，切不论哪个更难实现，反过来想问问自己，哪个以后更为常见呢？又是那个问题，我们到时候是更多在乎所谓的现实世界，还是更多在乎所谓的数字世界呢？我觉得，很可能更在乎的是数字世界，就我而言，更在乎用意识控制电脑打字出来，想想就激动的忍不住颤抖。&lt;/p&gt;

&lt;p&gt;还有一点。互动的成本，或者说，任何技术带来的学习成本。学习是有成本的，这个成本还不是定额的，就现在而言，我所知道的，年龄和阅历会让这个成本变得无法估计。所以，实现技术是一件事儿，普及还是一件。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>必然，我们在选择，也在被选择</title>
      <link>https://zllbird.github.io/2016/05/29/%E5%BF%85%E7%84%B6%E6%88%91%E4%BB%AC%E5%9C%A8%E9%80%89%E6%8B%A9%E4%B9%9F%E5%9C%A8%E8%A2%AB%E9%80%89%E6%8B%A9/</link>
      <pubDate>Sun, 29 May 2016 15:11:30 +0800</pubDate>
      
      <guid>https://zllbird.github.io/2016/05/29/%E5%BF%85%E7%84%B6%E6%88%91%E4%BB%AC%E5%9C%A8%E9%80%89%E6%8B%A9%E4%B9%9F%E5%9C%A8%E8%A2%AB%E9%80%89%E6%8B%A9/</guid>
      <description>

&lt;h1 id=&#34;必然-我们在选择-也在被选择:1c3125473ed37800649884e0f74ea659&#34;&gt;必然，我们在选择，也在被选择。&lt;/h1&gt;

&lt;h3 id=&#34;摘要:1c3125473ed37800649884e0f74ea659&#34;&gt;摘要&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;相见恨晚&lt;/li&gt;
&lt;li&gt;我就是我，是颜色不一样的烟火&lt;/li&gt;
&lt;li&gt;时间是个伪命题，但注意力是真命题&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;必然之必然，KK的这本书的确有很多角度让我折服。离开固有的想法不易，但重新解读固有的想法似乎更难。&lt;/p&gt;

&lt;h3 id=&#34;相见恨晚:1c3125473ed37800649884e0f74ea659&#34;&gt;相见恨晚&lt;/h3&gt;

&lt;p&gt;必然中专门讲了亚马逊的推荐，读书或者书目推荐，既然是读书。
那从读书讲起。
经常读书，最开心的莫过于读到一本好书，同理，不开心的也是读了半天才发觉是一本烂书。自然，选书一直是我的难题，而且越来越难，因为时间越来越少。每每读到一本好书的时候，总有那么一种&lt;strong&gt;相见恨晚&lt;/strong&gt;的感觉。自然，找到一本好书不易，找到一本一见如故，很对自己口味的好书更是难上加难，选书真的是一件很技术的活，&lt;strong&gt;直到&lt;/strong&gt;亚马逊的出现。&lt;/p&gt;

&lt;p&gt;*亚马逊的那个功能————购买这本书的用户，同时还购买了这几本书。*亚马逊的推荐真的是拯救了我，刚开始的时候我只是尝试的买了几本系统推荐给我的书，但随后便一发不可收拾，那种&lt;strong&gt;相见恨晚&lt;/strong&gt;的感觉一次接一次的，书荒已成历史。（此处让我先美一会儿）&lt;/p&gt;

&lt;p&gt;这个世界上，总有一些人和我喜欢一样的书，有着相似的历经，自然也会有着相似的书目，如果我们能相聚在一起，开个读书分享会，交换有无，将彼此读过的书分享出来，每次读书会结束，我都能收获一些新的书目，享受一段新的读书时光。以前，这是一个奢望，毕竟找到志同道合的人，然后相聚是一件多么需要巧合的事情，但在现在，它已经不需要了，数据洪流中，我们已经公开了分享了自己的书目，甚至分享了自己的品味和思考（只是我们并不自知），亚马逊将这些计算完，汇成一个标签，然后找到相同标签的人，将这些书目放到我们面前。&lt;strong&gt;至此，我跨过了我的奢望。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;替亚马逊做完广告。当我读必然读完这段的时候，我脑子里一直有这么一个想法。既然，志同道合能让数据推荐给我好书，那同仇敌忾是否也一样可以呢？比如，亚马逊的书下面有那么一个选项，喜欢/讨厌，供我选择。然后，在下次登录时，讨厌这本书的用户，都比较喜欢这几本书或者讨厌这本书的用户同时也讨厌这几本书。如此一来，岂不更有意思。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;志同道合是理由，那同仇敌忾也是。&lt;/strong&gt;其实对于我来说，不喜欢反而更能准确。和打仗一样，有时候不一定是有共同的目标而携手作战，而是因为有着共同的敌人。&lt;/p&gt;

&lt;h3 id=&#34;我就是我-是颜色不一样的烟火:1c3125473ed37800649884e0f74ea659&#34;&gt;我就是我，是颜色不一样的烟火&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;谷歌已经实现了，在大规模定制。我们很多创业，包括我正在工作的内容一样，也是在数字领域内，为用户做着个性化定制。在数字领域里，它变得没有那么困难和遥远，但在现实生活里，个性化定制仍然是奢侈品，仍然难以普通化。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;网络时代，尤其是我这种职业就是码农的人来说。所谓的个性化，已经不仅仅是趋势，真的就是这本书的题目那样，个性化是一种必然，这种必然在网络上，在数字上，正在发生。但现实生活里，工业化仍是这个社会的主题，个性与定制对于每个人来说的确很遥远。&lt;/p&gt;

&lt;p&gt;我喜欢张国荣的那首《我》，尤其是这句歌词——&lt;strong&gt;我就是我，是颜色不一样的烟火&lt;/strong&gt;。寥寥几字，却让我深深的着迷其中。我们人，为了生存而群居变得一样，但却又一直挣扎着，想变得不一样，真是奇怪。网络开启了这个门，越来越多的公司和企业在网络上为他们的用户提供各种各样的个性化定制，就像在亚马逊，我们每个人看到的首页的内容都是不一样的。但越是如此，在现实生活里，我们就不得不面对，普通化和工业化。个性似乎只能存在数字世界里&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;但是！但是！但是！我们真的需要吗？需要在现实里同样那么个性化吗？数字领域里的个性化真的不足够满足我们的个性化吗？&lt;/strong&gt;
我似乎从来不用虚拟世界这个词，大多数文字里我都用的，数字领域，数字世界，网络世界这样的词汇。大概本身是因为从事互联网开发，所以世界观来说，这个世界并不虚拟，反而真实的可怕。更何况，我感觉网络对我的改变更加的快速和迅猛，越发离不开手机和网络。我深深的感到，在数字里的时间超过我再现实生活里的时间，既然如此，数字和现实，哪个算真哪个又叫虚拟呢？&lt;/p&gt;

&lt;p&gt;也是如此，现实生活里的个性化虽然仍遥不可及，但在数字世界里的时间越长，反倒觉得现实里的那个性化不重要了。我似乎真的不太需要定制的拖鞋，定制的沙发，定制的台灯，因为我更需要定制的界面，定制的交互，与定制的功能。&lt;/p&gt;

&lt;p&gt;我们总在努力如何将现实中的东西复制到网络世界里，却忘了，在网络世界，我们需要吗？&lt;/p&gt;

&lt;h3 id=&#34;时间是个伪命题-但注意力是真命题:1c3125473ed37800649884e0f74ea659&#34;&gt;时间是个伪命题，但注意力是真命题&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;这就是后稀缺。我们只能与宏达世界的一小部分建立链接。所以，反过来，从宏达世界的方向来看，唯一稀缺的就是人类的注意力。
所以注意力留在哪里，金钱就就在那里。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;同样，当我看到必然中举了这么一个例子，当我们因为投放简历或者投放广告等向对方发送邮件，那么收件人可以向发件人征收打开费用！邮件被打开阅读，费用就会被扣除。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;这个逻辑非常的棒。向他人注意力支付报酬原则。&lt;/strong&gt;
时间是个伪命题，它的确稀有，甚至比金钱稀有，世界上有很多东西难以复制，但想破脑袋也总有那么一点点复制的可能，唯独时间没有。绝对的不可复制，让时间成了珍品，也是我们经常说的那样，一寸光阴一寸金，寸金难买寸光阴。但可怜的是时间不仅仅只是不可复制，还不可存储。一天只有24小时，不会多出一秒，却也不会少一秒。无论你有多少事情要做，只有24小时，但巧的是你什么事情都不去做，也有24小时。不可复制，也不可存储。你如果不用掉这个时间，那么不好意思，你只能浪费掉这个时间。所以时间是个伪命题。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;但注意力不是！&lt;/strong&gt;时间是亘古的，就在那里。注意力不是，注意力停在哪里，哪里就是工作，哪里就是生活。
网络给了我们一个大大的空间，让我们与这个世界的链接变得不那么困难，不在那么遥不可及。我们不用跑到亚历山大图书馆去找珍贵的单本，也不用跑到耶鲁大学去听公开课，这些你都可以通过google得到。发现了吗？在我们这个时空的世界里，空间被‘压缩’了，那些本来在空间上占据‘稀有’这个标签的东西，渐渐变得普通甚至廉价。同样，空间上的链接变得越来越容易，信息也同样变得越来越容易，容易的东西就会泛滥，这个时候，无法被网络复制的东西便会珍惜起来。注意力，基于时间成本上的这个东西，慢慢的变得稀有。因此，网络时代，注意力成了资源，成了‘货币’。
&lt;strong&gt;注意力留在哪里，金钱就在那里。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;什么是选择:1c3125473ed37800649884e0f74ea659&#34;&gt;什么是选择？&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;我们现在的选择权是越来越大。网购扩大的不仅仅是商圈，更是无限扩大了我们的选择权，那么，我们会选什么？那么，我们会怎么选？那些数据洪流，和我们生存或者说监视了我们好几年的数据，在帮我们选，事实上应该说，它们能预期到我们将会问什么。&lt;/p&gt;

&lt;p&gt;然而，我们并不知道自己想要什么。人就是这么奇怪，这么贱。相反，数据会告诉我们，我们想要什么，它是由我们自身行为所产生的建议和推荐。就像一面镜子。让我们看到自己想要什么的镜子。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;那么-什么是选择:1c3125473ed37800649884e0f74ea659&#34;&gt;那么，什么是选择？&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>幸福，兄弟</title>
      <link>https://zllbird.github.io/2016/05/28/%E5%B9%B8%E7%A6%8F%E5%85%84%E5%BC%9F/</link>
      <pubDate>Sat, 28 May 2016 16:24:26 +0800</pubDate>
      
      <guid>https://zllbird.github.io/2016/05/28/%E5%B9%B8%E7%A6%8F%E5%85%84%E5%BC%9F/</guid>
      <description>

&lt;h2 id=&#34;幸福-兄弟:99c5c5d3b863827ac589b345707f26ee&#34;&gt;幸福，兄弟&lt;/h2&gt;

&lt;p&gt;感冒似乎又加重了，本来计划写的文字又拖了。算了，还是忍不住爬起来，开始写这篇文字。&lt;/p&gt;

&lt;p&gt;我有一个兄弟，代号狐狸，前天结婚了。
新婚快乐，狐狸，非常的遗憾，我没能到现场，真的非常遗憾，我好渴望去现场看看，那应该是一个句号，很完美的那种，代表一个故事的结束和另一个故事的开始。&lt;/p&gt;

&lt;p&gt;我的文字里总是会出现狐狸（真的有这么一只狐狸），他也算是个名言大师，总会在不经意之间，吐出象牙，对于一只狐狸来说，嘴里能吐出象牙已经是很难得事情了。我和他开玩笑说，以后你说的多了，可以出本书，书名我都给你想好了，人家白岩松出本书叫白说，你也一样，出本书叫胡说（狐说），胡说八道的那个胡说。然后，他就会赶紧接上说，好呀好呀。&lt;/p&gt;

&lt;p&gt;在我这一群‘狐朋狗友’中，狐狸是&lt;strong&gt;第一个&lt;/strong&gt;结婚的，先驱总是会比剩下的人更面对更多困难，但也总比剩下的人收获更多。我们都问，狐狸，结婚到底是什么感觉？狐狸想了想说，累，很累&amp;hellip;妈的，累死老夫了。所以，我们都知道了，结婚真的很累人。但狐狸说这话的时候，一直掩盖不住笑意。所以，我们不知道，结婚到底有多满足自豪。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;又一次，感到无比的遗憾，未能去你的婚礼，未能亲眼看到你们走过红毯，未能亲口跟你说上那句新婚快乐，未能&amp;hellip;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这似乎是一个节点。从狐狸开始，终于也轮到我们这群人，慢慢走入婚姻，慢慢组建家庭，慢慢的开始柴米油盐，从那个小小的我变成那个大大的我。我们一直承载着父母的关怀，终于，要和另一个人一起，组建一个新的家。生活似乎变得不太一样，一下子要去想很多东西，一下子又要规划很多东西。&lt;/p&gt;

&lt;p&gt;狐狸说过，这群牲口们似乎都说过，喜欢过得过且过的生活，喜欢无拘无束的日子，不要去规划，也不愿去规划。但现在，只能自己打自己的脸了。因为生活不再是一个人的事儿了，是两个人，以后可能还会是三个人或四个人的事儿。我们不在无所畏惧，因为我们不在孤军奋战，人有了牵挂，就会变得不一样。
写着写着，就莫名的羡慕了。&lt;/p&gt;

&lt;p&gt;狐狸的故事，我看着看着，看了快十年，结果就这么错过了大结局。狐狸的爱情已经跑了十年，浪漫吗？当然浪漫，问人生能有几个十年，三十岁之前你能有几个十年？而且，最终走过红毯，许下今生的诺言，从此海枯石烂，粗茶淡饭，不离不弃的那个人，已经陪了你十年，&lt;strong&gt;卧槽，这么算算，真的幸福到爆！&lt;/strong&gt;。我从18岁，看着这个故事走到现在，结果最后的大剧照合影里没有我，&lt;strong&gt;妈蛋啊，真不甘心！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;末了。我其实也是个傻乎乎的人，我也准备了一份小小的稿子，打算到现场的时候，说给狐狸听。&lt;strong&gt;妈蛋的，稿子也没说，真不甘心啊：&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;想起七八年前，狐狸还喜欢染一头的红发，大晚上不好好上自习一群牲口出去喝酒，我真的记不起到底有几头牲口在场，我们在一起聊，梦想！对，一群不到十八岁的孩子不好好学习，跑出去喝酒还大谈梦想，大家一人一嘴不着实际的说着，轮到狐狸的时候，在那最最年轻无畏的时候，在那爱情超过全部的时候，狐狸说：&lt;strong&gt;她就是我的梦想！&lt;/strong&gt;或许狐狸不知道，他当时说出了我听过的最美的情话。
而现在，&lt;strong&gt;你的梦想实现了，祝贺你，新婚快乐，兄弟！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>给测试一个可以‘测试’的环境</title>
      <link>https://zllbird.github.io/2016/05/12/%E7%BB%99%E6%B5%8B%E8%AF%95%E4%B8%80%E4%B8%AA%E5%8F%AF%E4%BB%A5%E6%B5%8B%E8%AF%95%E7%9A%84%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Thu, 12 May 2016 10:13:20 +0800</pubDate>
      
      <guid>https://zllbird.github.io/2016/05/12/%E7%BB%99%E6%B5%8B%E8%AF%95%E4%B8%80%E4%B8%AA%E5%8F%AF%E4%BB%A5%E6%B5%8B%E8%AF%95%E7%9A%84%E7%8E%AF%E5%A2%83/</guid>
      <description>

&lt;h2 id=&#34;给测试一个可以-测试-的环境:58aa416285a8b6da672fedefb2540a53&#34;&gt;给测试一个可以‘测试’的环境&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;也算是一点心得。随便聊几句，感受下。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;现在的软件开发，至少有两个环境，一个是测试环境，用来开发、更改、调整代码，只提供给内部使用的环境。另一个是正式环境（线上环境），提供给外部使用的环境。当然，一般还有一个灰度测试环境，用于从测试环境到正式环境的缓冲带，给内部使用真实的环境。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;废话说完。
说实情，也是我准备更改的一件事情。&lt;strong&gt;不能给测试提供一个，可以有效用来进行测试的环境。&lt;/strong&gt;
测试本身，是存在大量重复和冗余工作，这点无法消除。但的确也存在，不必要的重复和冗余，导致测试的工作即便和饱和，但产品的质量却仍然得不到一个很好的保证。&lt;em&gt;（加上，我们的测试比较嫩，更容易被开发忽悠）。&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;提供给测试的环境不完整！&lt;/strong&gt;对于测试来说，这是一个相当大的拖累，对于项目来说，这是一个非常错误的信息，会让项目的所以协作者都误以为达到了某种节点或者里程碑，但事实上，这本就应该是未达到测试标准。偷换了概念，用不完整掩盖未达标，从而将工作转移到了修复和维护上，自然加重了测试的工作量。可怜的是，包括工程师在内，都不是有意为之，因为工程师在这个环节中，也是受害者——提测后的压力本就大于开发期的压力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提供给测试可以调控状况的能力！&lt;/strong&gt;在阶段性测试中，经常会遇到，由于这样那样的原因，导致测试频繁的（过度频繁的）要求开发提供响应的状况，双方都在这过程中产生大量的相互等待和相互影响，这是一种高额成本的损耗，而且相当没有意义。（简单举例说明，测试经常需要开发更改标志性时间戳，更改对应账号的参数，更改客户端请求不同服务器等）事实上，这不仅仅是损耗，还有可能在相互的更改中，忽略其他相关的问题。这点颇有心得，开发总会忽略一些调控状态的输出，但如果发生一个测试经常会要求更改的状况的话，开发本就应该提供相应的输出。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;给测试足够的否决权！&lt;/strong&gt;说完两个硬环境，说一个软环境。测试本身有否决开发的权利，当然这点我们团队做的有些缺陷，仍然在补全中，但毋庸置疑。而我这次想说的却是，测试也有相当一部分否决&lt;strong&gt;产品&lt;/strong&gt;的权利。这点我想了很久，对于小团队来说，测试是项目输出的第一道守护，很大程度上，测试对于项目输出的具体形态有着相当大影响，如此，否决&lt;strong&gt;产品&lt;/strong&gt;很大程度上能制约乱改乱加现象，同时也能维护住成本。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;所以，尽早构建CI，绝对是测试的福音。自动构建系统，至少满足两点。
1. &lt;strong&gt;不依赖开发，只需要开发做不定时的维护就可以。&lt;/strong&gt;
2. &lt;strong&gt;可以提供多种环境的构建。&lt;/strong&gt;
3. &lt;strong&gt;可以自动发布。&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>对于项目维护的思考</title>
      <link>https://zllbird.github.io/2016/05/12/%E5%AF%B9%E4%BA%8E%E9%A1%B9%E7%9B%AE%E7%BB%B4%E6%8A%A4%E7%9A%84%E6%80%9D%E8%80%83/</link>
      <pubDate>Thu, 12 May 2016 10:11:31 +0800</pubDate>
      
      <guid>https://zllbird.github.io/2016/05/12/%E5%AF%B9%E4%BA%8E%E9%A1%B9%E7%9B%AE%E7%BB%B4%E6%8A%A4%E7%9A%84%E6%80%9D%E8%80%83/</guid>
      <description>

&lt;h2 id=&#34;对于项目维护的思考:864c5fb8efa8298af296d9c83121ecb7&#34;&gt;对于项目维护的思考&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;漫谈。
程序写多了，对于一个项目的维护久了，产生了一些特别不一样的想法，写下来，与人念叨念叨。&lt;/p&gt;

&lt;h3 id=&#34;实际开发:864c5fb8efa8298af296d9c83121ecb7&#34;&gt;实际开发&lt;/h3&gt;

&lt;p&gt;说维护，自然要从&lt;strong&gt;实际&lt;/strong&gt;开发说起。
特别的聊一下加粗的这两个字，&lt;strong&gt;实际&lt;/strong&gt;。
实际开发中，总是会有状况发生的，这是定律，所以，对于实际开发来说，我第一个想法就是短，准确说，别做太多事让整个开发周期拉长。短是方便控制，同时也便与紧急处理。实际落实过程中，总是会出现这样或者那样的妥协，我们尝试了很多办法去减少状况的发生，刚开始还不错，但随着这样或者那样制度的复杂度加深，效果却越来越小，甚至反弹。只能说，通过外力去减少异常状况的发生，有用，但没有那么有用。
所以，把目光转回来。
&lt;strong&gt;如何紧急处理紧急问题，成了实际开发中的最大的问题。&lt;/strong&gt;就如我刚才所说的那样，这其中总会掺杂着这样或者那样的妥协，这篇是技术文，暂时抛开产品的专业性，就技术而言。如何紧急处理问题？
1. 减少复杂度。（&lt;strong&gt;这是最最重要的一条&lt;/strong&gt;）在绝大多数情况下，我们处理的问题本身的复杂度，不会超越技术本身的承受力。（相信我，超过的问题，一般都会有更牛的人在前面帮你开拓了）所以，大多数看起来复杂到不可控的问题，都是由于我们的认知不够，有可能是认知缺失，也有可能是疏忽，所以看起来很复杂。但实际却经不起推敲。所以，减少复杂度，我给的建议很简单，找到相关的人，坐下来，重新梳理之后，做减法，减掉不必要的复杂选项后，再做修复。减少复杂，不代表肯定是减少功能，这几年和产品的博弈过程中，每次找产品，产品都觉得是我在减功能，囧。&lt;strong&gt;重申一遍，梳理逻辑才是重中之重。&lt;/strong&gt;
2. 解耦。紧急问题的处理，总会有那么一种‘写死’的方案，或者说，总有那么一种成本低但耦合度高的方案可以勉强解决问题。千万不要这么做，这就是‘泥石坑’（人月神话），除非你不考虑下个版本，否则，这只能让你下个月的工作大大增加。因为，你不得不用一个很高昂的成本来弥补你这个时候偷的懒。
3. 尽早寻求帮助。紧急的问题加上时间的压榨，很容易让身处‘局里’的人盲目或者过激。不理智是留下遗留问题的根源，这里我自身也犯下了好几次错误。不得不说，坦诚承认，然后及时向他人寻求帮助是最好的对策，保证项目是首要，至于那一点点羞耻心真的不重要。因为纸包不住火，维护的时候终究还是要面对的。&lt;/p&gt;

&lt;p&gt;其实，说了这么多，感觉都跑题了。其实，我想说，项目维护时流的汗水，都是开发时，你处理紧急问题时脑子进的水。
&lt;strong&gt;不顾以后的维护，只图解决眼下的问题，终究是要偿还的。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;实际维护:864c5fb8efa8298af296d9c83121ecb7&#34;&gt;实际维护&lt;/h3&gt;

&lt;p&gt;维护或者优化。最重要的是：&lt;strong&gt;千万改完一个bug，又改出来一个。&lt;/strong&gt;
然后，这个事情基本上是我所见到的实际维护过程中最高频率出现的事情之一。而其中大多数原因，就是缺少思考的修改了原来的代码。这么讲的话，难道维护或者优化的时候修复一个bug，要来来回回的思考和判断逻辑才能改原来的代码吗？全部这么做的话，成本岂不是太过于高昂了。
&lt;strong&gt;不好意思，的确是这样的。维护时期修复一个问题，要比开发时期困难很多很多。&lt;/strong&gt;在一个勉强称得上稳定的系统上（默认上线的版本是较为稳定的版本），是它变得更加稳定和可靠是一件很难得事情。因为任何的修改的前提是，不能破坏原来的稳定。一句，不能破坏原来的稳定，就是最大的成本。
同时，维护还要尽量保证后来的维护或者优化能顺利进行，所以刚才的123点同时也是要注意。
也再说几点我的心得。
1. 时间是最大的成本。相信没有真正的维护时期，都是或多或少掺杂着新的开发，所以所谓的维护时间，并没有想象中的那么长。同时，人们总有种倾向，会认为新开发的优先级会高于旧维护的，毕竟，一个已经有了只是存在问题，另一个还没有。这种倾向会传染，让我们不自主的给维护更少的时间。
2. 拒绝拖延。程序开发里有一个不成名的定律，但凡说，以后改的问题，最终也没有改。说下一次就修复的事情，再也没有出现过下一次。这是个很伤心的事情，人始终不断的尝试或者做新的事情，的确能获得很多，同样，在修复和更改中，也能获得同样多，但却很少有人这么做。鸡汤说完，说实情。如果旧的问题始终不处理，会导致新的功能的不完整，连带出来很多新的问题。很少有功能或者说需求是完全和旧版本脱离的，自然使用也要不断使用旧版本中已经完成的功能，所以，拖延只能导致不断前进的步伐陷入‘坑’，举步维艰。&lt;/p&gt;

&lt;p&gt;随便写点，先写这么多吧。&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>CI</title>
      <link>https://zllbird.github.io/2016/05/12/ci/</link>
      <pubDate>Thu, 12 May 2016 10:09:32 +0800</pubDate>
      
      <guid>https://zllbird.github.io/2016/05/12/ci/</guid>
      <description>

&lt;h2 id=&#34;android-ios-双平台搭建ci心得-jenkins-gitlab-gradle-android-xcode-ios-fir-im-分发:fdf16477251a83f9aa87d6f1a4ff3aeb&#34;&gt;Android,iOS 双平台搭建CI心得（Jenkins + GitLab + Gradle(android)/Xcode(iOS) + fir.im(分发) ）&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;概述:fdf16477251a83f9aa87d6f1a4ff3aeb&#34;&gt;概述&lt;/h3&gt;

&lt;p&gt;由于上一篇写到想尽早搭建移动端的CI，这两天便一直折腾。总算有点结果，至于细致下来，还需要一些时间去专门调整后，再移交个QA。
&lt;em&gt;去年写过一篇，关于使用jenkins如何为安卓搭建自动生成分发的平台，左边目录点击就能找到。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;自动构建平台：&lt;code&gt;jenkins&lt;/code&gt;
版本控制：&lt;code&gt;git&lt;/code&gt;
编译工具：&lt;code&gt;Gradle(android)&lt;/code&gt;/&lt;code&gt;Xcode(iOS)&lt;/code&gt;
分发工具：&lt;code&gt;fir.im - fir-cl&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;选择&lt;code&gt;jenkins&lt;/code&gt;主要考虑到它比较稳定，另外一点是可以兼顾两个平台，别的平台大多数都是偏向&lt;code&gt;android&lt;/code&gt;或者&lt;code&gt;iOS&lt;/code&gt;中一个。别的不用说，分发工具选择&lt;code&gt;fir&lt;/code&gt;,在实践中发觉fir平台很稳定，非常适合做分发平台，而且重要的是，&lt;strong&gt;免费&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&#34;android:fdf16477251a83f9aa87d6f1a4ff3aeb&#34;&gt;Android&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://zllbird.github.io/2015/11/30/android%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA/&#34;&gt;Android自动构建&lt;/a&gt;
这篇是我以前写的，是完全可行的。这里做一点改造。
为满足，不同构建生成不同环境的APK包，而减少QA与开发之间沟通，并同时满足后台需要特定环境调试。所以构建平台要能提供相应的项目，释放开发的压力。
具体改造：
1. 为&lt;code&gt;Gradle&lt;/code&gt;配置全局变量，然后方便管理启用环境。因为我是使用Gradle进行配置，所以也同样使用Gradle属性赋值直接进行环境的更改。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 在Gradle文件中，比如在我的项目中是 config.gradle

task serverName {
	println &amp;quot;SEVER IS ${SEVER_CONFIG_CI}&amp;quot;
}

# 配置 SEVER_CONFIG_CI 可以通过Gradle自定义属性，也可以通过JVM配置等，这里使用比较偷懒的方法，直接定义gradle中的属性配置,但要在前面添加ORG_GRADLE_PROJECT_作为前缀
export ORG_GRADLE_PROJECT_SEVER_CONFIG_CI = 2

#这个时候就可以直接在命令行里运行 gradle serverName ，就能看到 结果为SEVER IS 2

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;配置完后，只需要在编译前，运行一次这个命令，就能提供相应的服务器环境了。
&lt;img src=&#34;https://zllbird.github.io/images/auto-ci/3.png&#34; alt=&#34;&#34; /&gt;
1. 将Gradle配置部署到jenkins上，一个项目对应一个环境，便于管理。具体步奏，在项目的配置中的&amp;gt;构建&amp;gt;增加构建步奏&amp;gt;Execute shell ,输入刚才提到的配置。
2. fir分发，用命令工具替换插件。原先用的插件支持并不友好（对我来说，命令行比较友好），所以这次fir提供了fir-cl工具后，便毅然决然的替换了原来的插件。步骤和2一样，只不过命令变成了&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fir publish ${WORKSPACE}/app/build/outputs/apk/app-baidu-debug.apk -T {firToken}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当然，我是直接在构建中使用了，也可以选择构建后。如果选择构建后运操作&amp;gt;增加构建后操作步奏&amp;gt;Excute a set of scripts&amp;gt;Build steps （或者Add a shell 将写好的脚本上传）
&lt;img src=&#34;https://zllbird.github.io/images/auto-ci/2.png&#34; alt=&#34;&#34; /&gt;
最后立即构建，享受吧~~~&lt;/p&gt;

&lt;h3 id=&#34;ios:fdf16477251a83f9aa87d6f1a4ff3aeb&#34;&gt;iOS&lt;/h3&gt;

&lt;p&gt;iOS 由于编译软件的限制，所以只能有苹果系统，包含Xcode的机器才能集成这套CI。
对于jenkins的安装这里不重复了，想了解的仍然是点击左边目录，Android自动构建里有。
由于我的项目中有Cocopods，所以具体配置中有些坑要注意。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Git拉去源码时可能会出现。十分钟就断开，导致项目拉去始终失败的可能。这里需要在项目配置中源码管理&amp;gt;Additional Behaviours&amp;gt;Advanced clone behaviours&amp;gt;Timeout for clone and fetch operations 中填入一个较大的值，防止timeout。
&lt;img src=&#34;https://zllbird.github.io/images/auto-ci/4.png&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;li&gt;构建中，选择Xcode。具体配置实例如下：&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;Target: JenkinsCI
Clean before build? YES
Generate Archive? YES
Pack application and build .ipa? YES
.ipa filename pattern: ${VERSION}
Output directory: ${workspace}/Builds/${BUILD_NUMBER}/${BUILD_ID}
Unlock Keychain? YES
Keychain path: ${HOME}/Library/Keychains/login.keychain
Keychain password: your administrator user password
Xcode Schema File: JenkinsCI
Xcode Workspace File: ${WORKSPACE}/JenkinsCI
Xcode Project Directory: ${WORKSPACE}
Xcode Project File: ${WORKSPACE}/JenkinsCI
Build output directory: ${WORKSPACE}/Build
Provide version number and run avgtool? YES
Technical version: ${BUILD_ID}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;特别要注意xcode workspace file 。由于pod使用时是通过workspace而不是project，所以不配置这个，构建始终不会成功。
1. fir分发。与android一样，这里我用了上面提到的第二种方法。
   &lt;img src=&#34;https://zllbird.github.io/images/auto-ci/1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;未解决的问题:fdf16477251a83f9aa87d6f1a4ff3aeb&#34;&gt;未解决的问题&lt;/h3&gt;

&lt;p&gt;iOS如何构建脚本生成不同环境。&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>iOS实践：一次失败的重构记实</title>
      <link>https://zllbird.github.io/2016/02/20/ios%E5%AE%9E%E8%B7%B5%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%87%8D%E6%9E%84%E8%AE%B0%E5%AE%9E/</link>
      <pubDate>Sat, 20 Feb 2016 16:33:44 +0800</pubDate>
      
      <guid>https://zllbird.github.io/2016/02/20/ios%E5%AE%9E%E8%B7%B5%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%87%8D%E6%9E%84%E8%AE%B0%E5%AE%9E/</guid>
      <description>

&lt;h1 id=&#34;ios实践-一次失败的重构记实:08113914c16819b58c74ffda7bf76beb&#34;&gt;iOS实践：一次失败的重构记实&lt;/h1&gt;

&lt;p&gt;摘要：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#2月15日，原代码分析，研究重构点&#34;&gt;2月15日，原代码分析，研究重构点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2月16日，尝试进行自适应和图片加载重构&#34;&gt;2月16日，尝试进行自适应和图片加载重构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2月17日，重构进行中&#34;&gt;2月17日，重构进行中&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2月18日，UI改造。&#34;&gt;2月18日，UI改造。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;2月19日，继续改造（图片逻辑处理方案以及一些感想）&#34;&gt;2月19日，继续改造（图片逻辑处理方案以及一些感想）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2月20日，图片加载模块重构&#34;&gt;2月20日，图片加载模块重构&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2月15日-原代码分析-研究重构点:08113914c16819b58c74ffda7bf76beb&#34;&gt;2月15日，原代码分析，研究重构点&lt;/h3&gt;

&lt;p&gt;严重问题：&lt;/p&gt;

&lt;p&gt;多类型列表的数据源控制，不仅使用了多个数组，还使用了一个包含所有数组的大字典来做统一管理。导致以下问题&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;阅读分析困难。命名的随意性更加加重了对代码的分析阅读，很难找到 相互关联的 UI与 数据源。可以理解为，视图和控制器虽分离了，但关联他们的接口混乱，导致无从查起。&lt;/li&gt;
&lt;li&gt;数据管理困难。数据源相关的类皆为类属性（成员变量），大量方法函数对6个数据源列表进行操作，严重增加调试和查找困难。&lt;/li&gt;
&lt;li&gt;数据类型多和混乱。通过大字典管理各个列表，然后就完全没涉及各个类型的数据的关系，然后共享出了问题。更直接的是，没有继承，整个界面就是一堆数据往里面塞得感觉。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;有意思的是，我本以为UI部分也会这样。但事实上，比我想象的要好非常多。有类型区分，有管理。UI的主要问题是没用自动布局，及其严重的增加了成本。尤其是对于动态的内容高度等计算。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;控件的布局困难。没有控件间的约束，导致控件之间的布局特别容易自己玩自己的去了。&lt;/li&gt;
&lt;li&gt;列表单元高度计算困难。过于动态的内容，导致控件过于复杂的计算。iOS系统中居然没有自适应这种东西，简直让我这个android工程师极度抓狂。&lt;/li&gt;
&lt;li&gt;单元模型设计的混乱。这个倒是可以理解，由于业务叠加的方向更改的任意性，产品变动的不可预测。直接导致单元模型的混乱，但也太混乱了。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;解决思路参考:08113914c16819b58c74ffda7bf76beb&#34;&gt;解决思路参考：&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;数据方面。&lt;/li&gt;
&lt;li&gt;- 数据源管理使用单一列表，不适用多列表加字典的方式

&lt;ul&gt;
&lt;li&gt;重新搭建继承关系。通过类型区分各个模型和单元&lt;/li&gt;
&lt;li&gt;数据的传递和共享可以通过回调处理，不需要硬塞。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;UI方面。&lt;/li&gt;
&lt;li&gt;- UI整体使用自动布局和约束来替代现在的写法。

&lt;ul&gt;
&lt;li&gt;引入自动适应的label方案，减少对于label文字内容的适应问题。&lt;/li&gt;
&lt;li&gt;引入列表单元自动适应高度解决方案。真心想告别计算单元高度的日子。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;分析自适应解决方案:08113914c16819b58c74ffda7bf76beb&#34;&gt;分析自适应解决方案&lt;/h4&gt;

&lt;p&gt;打算引入SDAutoLayout这个三方自适应。初步研究后，发觉能较好的适应tableView的自适应高度和Label的自适应高度。而且这个项目现在有专门人员在github是维护，且项目更新频率很高。&lt;/p&gt;

&lt;h3 id=&#34;2月16日-尝试进行自适应和图片加载重构:08113914c16819b58c74ffda7bf76beb&#34;&gt;2月16日，尝试进行自适应和图片加载重构&lt;/h3&gt;

&lt;p&gt;数据方面的重新梳理和关系重构。&lt;/p&gt;

&lt;p&gt;原来的数据model类中居然包含单元格高度属性…也是够了&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;这是一个典型的view和model未分离的情况。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重新命名，并修改内部相关属性。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这个世界上，总有一些傻逼是你躲不过去的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;现在是下午两点，简单说一些上午到现在做的一些东西。&lt;/p&gt;

&lt;p&gt;确认使用框架后，先对详情页的主贴和续帖进行重构。接下来进行了几项尝试。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在原CellView上进行修改。相继出现多过崩溃异常。放弃&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;重新撰写简单的CellView（只包含title 和一个 imageview）。进行调试，文本的自动适应和图片的自动适应相继成功。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;重新尝试1，但先进行cellview中，更改为autolayout，再进行自适应。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;相继出现各种不出现，同时由于方法相互关联太多，越更改越困难，调试也更加困难。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;重新尝试2，即从刚才较为简单的模型上添加控件，丰富界面，然后迁移点击事件。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;好吧。还是失败了。工作量太大，而且迁移的过程中存在大量的自定义view，导致需要查看大量自定义view，显得不是很现实。再想别的办法。&lt;/p&gt;

&lt;h3 id=&#34;2月17日-重构进行中:08113914c16819b58c74ffda7bf76beb&#34;&gt;2月17日，重构进行中&lt;/h3&gt;

&lt;p&gt;帖子详情页里，主贴，细小的功能非常之多。比我想象中的要困难很多。文本，文字很多需要转富文本，而且同时，还支持各种各样的点击。&lt;/p&gt;

&lt;p&gt;主要的图片问题，终于不得不面对了。帖子详情页的图片加载异常混乱，每次加载完一个图片，就会调用界面重绘，极大的加重了UI负担和界面不可控。也是引起帖子详情页加载会崩溃的原因。&lt;/p&gt;

&lt;p&gt;所以，暂时决定暂停UI，先行处理图片加载问题。&lt;/p&gt;

&lt;p&gt;比我想象的还要困难。略有小感：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;重构中困难的是取舍，原先代码是很糟（不糟谁重构啊），但却不能一下子全部抛弃，如果全部推翻重写的成本过于昂贵。
所以，预想中逐步重构，一点一点推翻。
但问题又来了，原先耦合性高且冗杂，加上复杂的业务逻辑，导致改一点就会引起新的问题，又要填补新的解决方案，反而被重构拖累，逐步更改的成本就会越来越高。
这是一个度的问题，但问题是，谁TM告诉我，这个度在哪里！！！
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;打算使用较为优秀的SDWebImage框架。Demo测试通过，开始集成到项目中。&lt;/p&gt;

&lt;p&gt;集成过程异常艰辛。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;通过pod包管理集成，出现异常。有重复类版本相撞无法通过编译。&lt;/li&gt;
&lt;li&gt;艰难查实的确存在，但置于一个叫MW&amp;hellip;的文件中的lib文件夹下。&lt;/li&gt;
&lt;li&gt;简单查阅叫MW&amp;hellip;这个鬼的用处，根本找不到用在哪，心好累，又不能直接暴力删除。也是够了！&lt;/li&gt;
&lt;li&gt;直接替换源码试试。 试验失败了，直接替换掉源码，导致另一些类报错，数目很多。估计是对源码进行了加工修改。只能放弃。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;妥协方案，用较旧的三方暂时实现图片加载。&lt;/p&gt;

&lt;p&gt;失败：&lt;/p&gt;

&lt;p&gt;重新回到自适应上，虽然有了一套对于自适应使用的流程代码，但对于复杂又多类型又过于动态的列表仍旧不能适应。需要补充的判断实在是过于复杂，所以，这期自适应，预计将搁浅。&lt;/p&gt;

&lt;p&gt;先在较为简单的列表里试验，然后再着手处理复杂还多图的列表吧。&lt;/p&gt;

&lt;h3 id=&#34;2月18日-ui改造:08113914c16819b58c74ffda7bf76beb&#34;&gt;2月18日，UI改造。&lt;/h3&gt;

&lt;p&gt;改了快一天UI，感悟重申：想要一层层重构，最大的难点其实是对原代码的解读上。最大的成本也是。因为糟糕的代码配合特别动态的逻辑，衍生出来的复杂程度可见一斑。&lt;/p&gt;

&lt;p&gt;今天遇到的巨大的问题，更改一处UI，会衍生新的UI问题，更改新的UI问题，又可能会衍生出新的问题。遇到了重构需要换多少血才行，当然是全换最好，可时间和人力成本却不可负担。如果只是更换部分，就会引发多米骨牌，连续的问题会让重构变成焦油坑。&lt;/p&gt;

&lt;p&gt;iOS的视图，容器对控件或者父类视图对子类控制能力太弱。列表视图居然需要手动计算每个具体单元高度，这让我非常难以接受，如果计算出错，可能会导致上一个单元的内容遮盖下面单元格的内容，这点让我更加难以接受。同时也让我在进行抽离时，如履薄冰，不知道动哪里会影响到相关方法。&lt;/p&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;大概遇到两个不得不思考解决的适应问题。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;图片载入对UI刷新的影响。&lt;/li&gt;
&lt;li&gt;文字控件对文字是否能自适应高度。（文本控件居然没有一个属性，自适应高度。这不是刚需吗？程序设计应该要有的啊？想不明白！！！）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;UILabel的适应解决方案：&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;//初始化添加属性
label.numberOfLines = 0;
label.lineBreakMode = NSLineBreakByWordWrapping;

// 填入文字后添加
label.text = data.content
[label sizeToFit]

//注意：只有有宽度的label才能自动分行适应。
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2月19日-继续改造-图片逻辑处理方案以及一些感想:08113914c16819b58c74ffda7bf76beb&#34;&gt;2月19日，继续改造（图片逻辑处理方案以及一些感想）&lt;/h3&gt;

&lt;p&gt;对图片进行改造。&lt;/p&gt;

&lt;p&gt;粗定一个图片改造计划。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;图片服务交给第三方，真的要交给第三方！现在三方对于图片的服务和管理真的已经很优秀了。我们是基于又拍云的服务提供。&lt;/p&gt;

&lt;p&gt;——血泪教训&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;不改动原先代码核心逻辑。一是平稳，而是原先代码的编写过于复杂，阅读成本就非常高，更改成本就更不可控了。&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;原先的工具类，图片加载的方法需要传递八个参数。八个参数！八个参数！八个参数！真是疯了。这里犯了一个较为明显的错误，参数太多！&lt;/p&gt;

&lt;p&gt;方法参数是趋向于越少越好。参数目的是为了控制方法的实现能力，参数越多，实现的能力越强，但实现的情况和结果也越多，而且，每增加一个参数，对于实现出来的结果可能性都是成倍的增加，对修改成本也是很大，无从下手，也无法修改，巨大的不确定性，让这个方法理解和使用都有巨大的成本，对于随后维护的工程师更是大大大大的成本。&lt;/p&gt;

&lt;p&gt;所以，方法的参数，没有自然是最优。一个参数，很漂亮，也很自然，基本也不用具体看方法实现。两个参数，已经开始多重方向的控制了，有时需要进入方法具体实现查看。三个参数，必须进入方法具体实现来查看，而且，找三个参数扔进这个方法已经是高额成本了。四个参数，对不起，你写的这个方法有问题。&lt;/p&gt;

&lt;p&gt;当然，参数越积越多总是有原因的。一个很大的原因是，参数间本身是有关系，或者是协同一起去控制方法走向的，这时候，应该将几个协同合作的参数封装成一个类，以类的形式对外暴露。这是最直接也是最有效的重构。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;只更改从又拍云上获得图片逻辑，并与原代码逻辑脱离，单独新建方法，并封装新类进行新的图片逻辑撰写。当然，新方法不支持从老式图片服务器拉图片。&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;对旧系统的维护和支持要逐步进行替换和更迭。这两年花费了大量时间用户进行旧版本的适配支持，但淘汰率在时间上却很快。成本沉没率很高。现在想想也对，需要对旧版本进行适配和技术提供，就需要更多的时间去设计和修改问题，但这段时间里，新旧迭代的时间却也很快。大概最明显的例子，就是对于iOS 6789的支持了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;随后的新功能，新代码将缓存和加载这件事情上交给三方。&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;随后会再写一篇文字，关于我们到底用不用开源，用多少好。都说适度的使用较好，尼玛！到底什么叫适度，我会写一篇自己的理解出来。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;原本的代码是通过类扩展的方式实现的，所以直接在类扩展里加入了新的类扩展方式去实现。然后调用代码也简化了。基本功能已经跑通。&lt;/p&gt;

&lt;h3 id=&#34;2月20日-图片加载模块重构:08113914c16819b58c74ffda7bf76beb&#34;&gt;2月20日，图片加载模块重构&lt;/h3&gt;

&lt;p&gt;昨天已经跑通的基本功能，今天主要是对于图片加载重构的设计和规范。&lt;/p&gt;

&lt;p&gt;用了比较直接暴力的方法，直接引用使用，所有的缓存复用等交给依赖包。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;具体参考&lt;a href=&#34;图片加载设计和规范.md&#34;&gt;图片加载设计和规范&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;然后，便进入了重构过程中最最无聊的体力活阶段了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>美人鱼和周星驰</title>
      <link>https://zllbird.github.io/2016/02/17/%E7%BE%8E%E4%BA%BA%E9%B1%BC%E5%92%8C%E5%91%A8%E6%98%9F%E9%A9%B0/</link>
      <pubDate>Wed, 17 Feb 2016 19:48:42 +0800</pubDate>
      
      <guid>https://zllbird.github.io/2016/02/17/%E7%BE%8E%E4%BA%BA%E9%B1%BC%E5%92%8C%E5%91%A8%E6%98%9F%E9%A9%B0/</guid>
      <description>

&lt;h2 id=&#34;则西-医疗-百度-责与罪:de921a30120fff62898217a2e947a485&#34;&gt;则西，医疗，百度，责与罪&lt;/h2&gt;

&lt;p&gt;风波一层过后，又来了一层。早上又一次看到新闻，看到知乎上对于广州那位被伤害的医生的讨论和评论。医疗问题再一次被推到风口浪尖上，也再一次让我思考和疼痛。我们眼下的医疗到底有多少毒在里面，然后，我们又到底该何去何从？
这篇文字还是只讨论则西事件，至于广州医生的事件，我仍需要一些补充一下事实再来讨论。
从我的角度出发，两点，&lt;strong&gt;责任和罪恶&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;先说责任。
十分制，武警医院3分，莆田系4分，政府相关2分，百度1分。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;这样写，估计很多人会先骂一顿，然后直接关掉网页了吧。只能先把下面的关于罪恶的评分也写上去，单纯的证明，我对百度的深恶痛绝。
罪恶十分，百度9分，剩下加起来还不如1分。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我是程序员，预期说太过于理性，不如说太过于现实。则西在知乎上那篇文字我很早就看到了，比这件事情还要早，则西将罪恶指向百度是事实，这点毋庸置疑，但莆田系和武警医院是也肯定是祸首，从责任上来讲，无论如何这两家都要付出绝对的代价。
先说医疗吧。三月四月我也基本全在医院，为治疗我父亲的癌症奔波，也同样失望绝望着，所以，我早早看到了则西死前的文字，不同说完全感同身受，但也的确历经着，有所感触。
先推荐几个我关注的人对于医疗方面的讨论。
&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MjM5ODQwMjA4MA==&amp;amp;mid=2649293393&amp;amp;idx=1&amp;amp;sn=0f8eb74168b13010537e2e16607856fe&amp;amp;scene=0#wechat_redirect&#34;&gt;可能吧-为甚了google没有虚假广告&lt;/a&gt;
&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzAwOTMwOTc3MA==&amp;amp;mid=2650482699&amp;amp;idx=1&amp;amp;sn=e129cd63ea8dbff64a47ffaacdd2ed78&amp;amp;scene=0#wechat_redirect&#34;&gt;君临-面对则西事件，李彦宏现在是什么状态，什么心情&lt;/a&gt;
他们说的很好，我心里有那么点思路，却完全组织不出来他们的语言来，索性便直接将链接引过来。
然后，说点切身的体会。在医院里吃住了近两个月，看到太多太多，其实有点心灰意冷，医生的圣洁之下，隐藏的太多罪与恶。也终于不得不明白，在中国（其实在整个世界上）看病是多么困难的一件事。
理性的讲，除了极个别名声在外的好医院外，中国剩下的医院基本都陷入了一种不得不的失责。由于政府对医院的甩手，医院需要自己满足收支平衡，让看病这个事儿，掺杂了生意成分进去。坦白说，生意场上，有大是大非，没有小善小恶，但医院里却有。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;人可以有，小善小恶，因为人无完人。但人必须坚持，大是大非，因为需要配的起叫做人。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;医院的乱收费现象不用特别说明，几乎历经的人都明白。谋财这个事儿，是已经浮出来的事儿。这是劣根，很难改的。
坦白讲，有些事情，很荒诞，但我却是认得。我看病的时候，总是会碰见乱收费，医生也会多开些药，甚至只开些营养品，来增加医院和医生自己的收入，大多数情况下，只要不是很过分，即便我心里明白，仍然愿意为此买单。
你可能觉得这是‘助恶’，但实情是，就算名声在外的大医院（如协和医院），在收支上也是非常的微弱。
但这次武警医院和莆田系，真是给了我一计响亮的耳光。我一直以为，医院和医生，首先是为了给病人看病，然后再开一些营养品甚至开一些无关紧要的药来增加收入。而不是，就是为了贪念，为了挣钱，就是为了谋财，而不是为了看病。这不谋财害病，这真的不仅仅是恶，这是罪。底线的失守，让它彻底成为了毒瘤，恶心。
医院和医生，和普通职业是有区别的，它自带着一种契约精神，一种与生俱来的信任。
利用它来赚钱已经是失衡的恶，而破坏它去敛财，去谋财害命，是超出我认知的大罪，无法饶恕，不可原谅。
再说罪恶。
刚才我说，百度这事中责任不大，则西真正接触百度查找的时间应该不多，更多的是在医院里被折磨。所以说，就这件事来讲，百度是一分的责任。但，事情单纯拿出来说，就太苍白了。他这一分，是入口，是带着则西填入深渊的一分。
我问自己，这样子，真的只算一分吗？
就算我真的认，百度只有一分的责任的话。我仍然说，百度有9分的罪恶，是大罪，十恶不赦的那种。百度不是只为武警医院和莆田系的做虚假广告，百度的广告诟病太深，太沉重。毫不夸张的说，它是很多虚假广告的入口，医疗、教育、科技、社会等&amp;hellip;甚至，很多正规的企业或者公办处的电话，在百度提供出来的，都是虚假的&amp;hellip;只不过，医疗太过于敏感，被推到了公众前面罢了。
我不知道描绘的是不是清楚，但却绝对是一件细思恐怖的事情。如果把社会摊到面上来讲，各个事情都有着不同的负责或者祸首，但却有着一个相同的帮凶，不，准确说，一个相同的接引人。每个骗局里，每个罪恶里，你都能看到同一个名字出现在里面，关想到这里，我已经感到了莫大的恐怖，实在是想不下去了&amp;hellip;
所以，我除了厌恶百度，也真的恐惧百度。
一个企业，走到这里，真的是很糟糕。作为一个程序员，刚入行的时候，这个公司曾一度是我的理想目标之一。
沦落至此，让我不仅仅是同情与可悲，更有一种想除之后快的感觉。作为一个技术人，真的明白，用技术作恶是一件多么后怕的事情。尤其是一个已经失去了底线的公司&amp;hellip;
请远离百度，这是我的忠告。&lt;/p&gt;

&lt;p&gt;本来已经结束的文字，但在知乎上看到洗地的一系列后，我真的忍不住破口大骂。谷歌没有虚假广告吗？有，而且很多。谷歌里的人没有为了钱财而更改或者变相更改搜索结果排序吗？有，而且很多。但整个公司在努力的制止，整个公司在用各种监管来限制手下想谋财而更改排名，整个公司在修正着，所以谷歌说，Don&amp;rsquo;t be evil。
但百度不是，如果说谷歌是有恶，在修正的话，那么百度就是实打实的作恶！
&lt;strong&gt;这就是大罪，十罪不赦的那种！！！&lt;/strong&gt;
一个企业，做公关，谁都能理解。但，这样子去洗地，实在是。&lt;/p&gt;

&lt;p&gt;最后，我所能提出的建议，只能是远离。任何百度的产品都不去触碰。我甚至卸载了百度外卖，坦诚讲，我怕了，它没事，只是和百度沾上了，所以我怕了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>美人鱼和周星驰</title>
      <link>https://zllbird.github.io/2016/02/17/%E7%BE%8E%E4%BA%BA%E9%B1%BC%E5%92%8C%E5%91%A8%E6%98%9F%E9%A9%B0/</link>
      <pubDate>Wed, 17 Feb 2016 19:48:42 +0800</pubDate>
      
      <guid>https://zllbird.github.io/2016/02/17/%E7%BE%8E%E4%BA%BA%E9%B1%BC%E5%92%8C%E5%91%A8%E6%98%9F%E9%A9%B0/</guid>
      <description>

&lt;h2 id=&#34;美人鱼和周星驰:a2af5027f0faa22ae57b2d151d2a1457&#34;&gt;美人鱼和周星驰&lt;/h2&gt;

&lt;p&gt;大年初一，便兴趣盎然的去看了——美人鱼。&lt;/p&gt;

&lt;p&gt;我是星爷的影迷，粉丝，脑残粉，（所以写这篇文字里基本都是各种顶膜崇拜），自然会在上映第一天就屁颠屁颠的去看了这部16年的大作，美人鱼。&lt;/p&gt;

&lt;p&gt;随后，回到家后，借着大年这些天无聊的时间，又陆陆续续的把功夫，喜剧之王，少林足球，大话西游再lu了一遍。看完后，脑子嗡嗡的，便写了这几个字。&lt;/p&gt;

&lt;p&gt;我依旧在豆瓣上给了5分，虽然我觉得它不值这个分数，大概也就4分，甚至不足4分，但我是脑残粉嘛。&lt;/p&gt;

&lt;p&gt;美人鱼开篇很多老梗，随后电影里很多很多老梗。开篇里，拿起咸鱼，然后馆长从浴缸里出水时那特渣的特效，都是以前影片里的影子。&lt;/p&gt;

&lt;p&gt;当我看到，珊刺杀富豪轩的那组戏时，我又无耻的笑了。尤其是看到，林子聪出来的那个瞬间，笑的我竟然感动了，（当年就是这个死胖子）。豆瓣说好多评价较低的说都是些老梗，这组戏应该是最为明显的了，功夫中林子聪也是这样，把我们的星爷扎的不要不要的。只不过这次是个女孩，看着还略微有点疼。&lt;/p&gt;

&lt;p&gt;说抄袭的&amp;hellip;一边去，自己抄自己的都叫抄袭了，你还要不要人家拍电影了&amp;hellip;&lt;/p&gt;

&lt;p&gt;说没创意的&amp;hellip;那要看你怎么定义创意了，如果非说从0到1是没创意。那我也觉得星爷这次这的没创意，不过星爷老了，我对这个有没有创意，要求不高。看完后我还是能哈哈笑出来，我就觉得挺好。&lt;/p&gt;

&lt;p&gt;珊和富豪在游乐场边吃烧鸡，飙歌那段，真的是满满的搞笑和纯爱。这种简单加暴力的方式去诠释纯爱和眷恋，简直就跟闹着玩似得。记得以前在一篇文字中看到，李安说周星驰总是弄一些小孩子的玩意。大概，就是说星爷这种闹着玩的把爱表达了吧。&lt;/p&gt;

&lt;p&gt;真的很喜欢这段，如果爱可以这么笑的看完，为啥非要那么多撕心裂肺呢。&lt;/p&gt;

&lt;p&gt;说完了好的，说点不好的。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;期待本身就是最大的负担和失望。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;星爷这部电影，没那么好。尤其是又看了几部以前的电影，更加显得没那么好。美人鱼结尾的确有些凌乱，好多想表达的东西，都没表达出来。不够深刻，或者说，不够星爷的惯常的那种深刻。&lt;/p&gt;

&lt;p&gt;读懂了结局，读的太懂了，甚至还没来得及回味。这种感觉并不舒服。&lt;/p&gt;

&lt;p&gt;无论是大话西游还是喜剧之王，更不用说功夫。看完后，总有一些东西仿佛明白了，又仿佛还差那么一点点，忍不住想再看一遍。美人鱼缺的大概就是这种再来一遍的冲动。&lt;/p&gt;

&lt;p&gt;有人说，这是星爷境界太高，咱悟不到。也有人说，这是星爷返璞归真，无招胜有招。当然，也有人说，江郎才尽，思绪枯涸了，搞不出来了。&lt;/p&gt;

&lt;p&gt;聊两句我眼里的吧。&lt;/p&gt;

&lt;p&gt;无论我多么不愿意承认，星爷的巅峰的的确确已经过去了。喜剧之王和功夫，成就了太多东西，也压榨了太多。（这两部影片一直是我的大爱）&lt;/p&gt;

&lt;p&gt;也可以说，最让人敬畏的星爷和星爷的电影时代过去了。那敬畏之后呢？&lt;/p&gt;

&lt;p&gt;从星仔到星爷，创作或许是有起伏，但认真却是从一而终。星爷的认真，真真切切从未变过。也是这种奇怪的认真在里面，保证了星爷的作品只有两个档——优秀和卓越。&lt;/p&gt;

&lt;p&gt;这部美人鱼，真的称不上卓越，但说它优秀绝对没有问题。&lt;/p&gt;

&lt;p&gt;至于卓越嘛&amp;hellip;怎么讲呢？可遇不可求。因为在我看来，艺术上的卓越除了足够的实力和能力以外，还需要被长时间挤压的那种无法宣泄的灵感，在一次意外的碰撞后，喷涌而出，铸就卓越！&lt;/p&gt;

&lt;p&gt;所以，追求卓越本身就是一件很奢侈，也很痛快的事儿。&lt;/p&gt;

&lt;p&gt;而要求星爷的作品都卓越…也有点要求过高了&amp;hellip;&lt;/p&gt;

&lt;p&gt;但&amp;hellip;&lt;/p&gt;

&lt;p&gt;星爷下一部作品肯定是一部卓越的作品！因为&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;崇拜本身就是盲目的，不是吗？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;2016.2.10&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>闭包，编程思考</title>
      <link>https://zllbird.github.io/2016/01/20/%E9%97%AD%E5%8C%85%E7%BC%96%E7%A8%8B%E6%80%9D%E8%80%83/</link>
      <pubDate>Wed, 20 Jan 2016 13:30:51 +0800</pubDate>
      
      <guid>https://zllbird.github.io/2016/01/20/%E9%97%AD%E5%8C%85%E7%BC%96%E7%A8%8B%E6%80%9D%E8%80%83/</guid>
      <description>

&lt;h2 id=&#34;闭包-编程思考:9832bcef4d84f38f7ad4bc607eea0d15&#34;&gt;闭包，编程思考&lt;/h2&gt;

&lt;p&gt;缘由：经常会文章里看到闭包，对闭包有种感念，但有时候会绕进去。正好加上，android端的构建使用了gradle，gradle脚本基本上都是由闭包构成和撰写的，便研究了一番。更加巧合的是，参与iOS问题讨论的时候，发现了Block这种编写方式，越发觉得这些都是速途同归的玩意。&lt;/p&gt;

&lt;h3 id=&#34;摘要:9832bcef4d84f38f7ad4bc607eea0d15&#34;&gt;摘要：&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;闭包定义&lt;/li&gt;
&lt;li&gt;解读闭包&lt;/li&gt;
&lt;li&gt;闭包的意义&lt;/li&gt;
&lt;li&gt;不同语言对于闭包的另类实现&lt;/li&gt;
&lt;li&gt;思考&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;闭包定义:9832bcef4d84f38f7ad4bc607eea0d15&#34;&gt;闭包定义&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Closure_(computer_programming&#34;&gt;Wiki上闭包的解读（很精彩）&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;闭包的定义：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;closures&lt;/strong&gt; (also &lt;strong&gt;lexical closures&lt;/strong&gt; or &lt;strong&gt;function closures&lt;/strong&gt;) are a technique for implementing &lt;a href=&#34;https://en.wikipedia.org/wiki/Lexically_scoped&#34;&gt;lexically scoped&lt;/a&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Name_binding&#34;&gt;name binding&lt;/a&gt; in languages with &lt;a href=&#34;https://en.wikipedia.org/wiki/First-class_function&#34;&gt;first-class functions&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;可以给个中文版本的：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;闭包，是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;解读闭包:9832bcef4d84f38f7ad4bc607eea0d15&#34;&gt;解读闭包&lt;/h3&gt;

&lt;p&gt;好吧好吧，无论是英文还是中文，读起来感觉都特别的绕口，理解起来就更绕口了。&lt;/p&gt;

&lt;p&gt;还是直接暴力点吧，直接来代码吧：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;function startAt(x)
   function incrementBy(y)
       return x + y
   return incrementBy

variable closure1 = startAt(1)
variable closure2 = startAt(5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;这是基于python的闭包的写法。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;（在我的接触中，python语言是较为简单的，入门比较低，即便没有入门，看代码也不是困难，所以拿python举例，当然，建议大家都学学这个语言，一般一个星期写简单的程序就没问题了）&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;（python中，缩进代表 {} 符号）&lt;/em&gt;&lt;/p&gt;

&lt;h5 id=&#34;解读:9832bcef4d84f38f7ad4bc607eea0d15&#34;&gt;解读：&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;startAt&lt;/code&gt;是一个函数，或者叫方法。它的返回值也是一个函数，或者叫，它返回一个函数类型的值。&lt;/p&gt;

&lt;p&gt;那么有意思的来了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;closure1(3) = 4
closure2(3) = 8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那么，&lt;code&gt;startAt&lt;/code&gt;到底是什么？&lt;/p&gt;

&lt;p&gt;解释它之前，先解释一下变量closure1 和变量 closure2&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;closure1 = 1 + 参数
closure2 = 5 + 参数
//所以 closure2(3) = 5 + 3 = 8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以发觉，&lt;code&gt;startAt&lt;/code&gt;是定义了一种加法。但属于它的变量&lt;code&gt;x&lt;/code&gt;却离开了&lt;code&gt;startAt&lt;/code&gt;一直和&lt;code&gt;closure1&lt;/code&gt;和&lt;code&gt;closure2&lt;/code&gt;存在，赶紧回去看一下刚才最初的定义。&lt;/p&gt;

&lt;p&gt;下面是我最喜欢的一段对于闭包的解读：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Closures are typically implemented with a special &lt;a href=&#34;https://en.wikipedia.org/wiki/Data_structure&#34;&gt;data structure&lt;/a&gt; that contains a &lt;a href=&#34;https://en.wikipedia.org/wiki/Function_pointer&#34;&gt;pointer to the function code&lt;/a&gt;, plus a representation of the function&amp;rsquo;s lexical environment (i.e., the set of available variables) at the time when the closure was created. The referencing environment &lt;a href=&#34;https://en.wikipedia.org/wiki/Name_binding&#34;&gt;binds&lt;/a&gt; the non-local names to the corresponding variables in the lexical environment at the time the closure is created, additionally extending their lifetime to at least as long as the lifetime of the closure itself. When the closure is *entered* at a later time, possibly with a different lexical environment, the function is executed with its non-local variables referring to the ones captured by the closure, not the current environment.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;闭包的意义:9832bcef4d84f38f7ad4bc607eea0d15&#34;&gt;闭包的意义&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;因为闭包只有在被调用时才执行操作，即“&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%83%B0%E6%80%A7%E6%B1%82%E5%80%BC&#34;&gt;惰性求值&lt;/a&gt;”，所以它可以被用来定义控制结构。例如：在&lt;a href=&#34;https://zh.wikipedia.org/wiki/Smalltalk&#34;&gt;Smalltalk&lt;/a&gt;语言中，所有的控制结构，包括分歧条件(if/then/else)和循环(while和for)，都是通过闭包实现的。用户也可以使用闭包定义自己的控制结构。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;感受一下，一会儿看到各个语言的实现，就能有那种醍醐灌顶的感觉了。&lt;/p&gt;

&lt;h3 id=&#34;不同语言对于闭包的另类实现:9832bcef4d84f38f7ad4bc607eea0d15&#34;&gt;不同语言对于闭包的另类实现&lt;/h3&gt;

&lt;p&gt;解读完闭包了，聊一下，这个玩意最大的问题是什么？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;作用域&lt;/strong&gt; &amp;ndash;&amp;gt; 自由变量的作用域，导致自由变量的混乱管理。&lt;/p&gt;

&lt;p&gt;我将先以&lt;code&gt;javascript&lt;/code&gt;为例，介绍最大的问题。&lt;/p&gt;

&lt;p&gt;然后，我再会分别介绍一下&lt;code&gt;java&lt;/code&gt;以及&lt;code&gt;Object-C&lt;/code&gt;为例子，解释一下其他语言是如何另类实现闭包，并怎么处理作用域的问题。&lt;/p&gt;

&lt;h4 id=&#34;javascript-的闭包:9832bcef4d84f38f7ad4bc607eea0d15&#34;&gt;&lt;code&gt;javascript&lt;/code&gt;的闭包&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// ECMAScript , javascript
var f, g;
function foo() {
  var x; // 
  f = function() { x = x + 1 ; return x; }; //
  g = function() { x = x +5 ; return x; };	//
  x = 1;
  alert(&#39;inside foo, call to f(): &#39; + f()); // 2
}
foo();
alert(&#39;call to g(): &#39; + g());  // 7
alert(&#39;call to f(): &#39; + f());  // 8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到结果为。&lt;/p&gt;

&lt;p&gt;如果我将输出顺序换一下呢？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;alert(&#39;call to f(): &#39; + f()); // 3
alert(&#39;call to g(): &#39; + g()); // 8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;给你们两分钟时间，再想一下。&lt;/p&gt;

&lt;p&gt;可以看到。在&lt;code&gt;foo&lt;/code&gt;中声明的变量&lt;code&gt;x&lt;/code&gt;，由于闭包的存在，导致&lt;code&gt;x&lt;/code&gt;的作用域一直扩展到程序的底部，在&lt;code&gt;foo&lt;/code&gt;函数结束后还一直坚挺的活着。（这是我们刚才已经知道了的。）&lt;/p&gt;

&lt;p&gt;不仅活着，还可以被更改，然后再使用！&lt;/p&gt;

&lt;p&gt;那么问题到底是什么呢？&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;难以管理。&lt;/li&gt;
&lt;li&gt;持有。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;所以&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;java-以及-object-c-对闭包的-实现:9832bcef4d84f38f7ad4bc607eea0d15&#34;&gt;&lt;code&gt;JAVA&lt;/code&gt; 以及&lt;code&gt;Object-C&lt;/code&gt;对闭包的‘实现’&lt;/h3&gt;

&lt;p&gt;直接说，&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;java&lt;/code&gt;中是 匿名内部类&lt;/li&gt;
&lt;li&gt;&lt;code&gt;object-c&lt;/code&gt;中是 Block运用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以基于这点来讲，&lt;code&gt;java&lt;/code&gt;更加面向对象一点，真的是很努力做到一切都是对象了。&lt;/p&gt;

&lt;p&gt;先看一下&lt;code&gt;java&lt;/code&gt;代码吧：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public void foo(){
   final int x = 1 ; //

  //f(lambda (x) -&amp;gt; person.setAge(x));

  f(new OnChangListner(){
  		void onChang(){
  			person.setAge(x);
		}
	});

  // 当然方法f必须事先定义好
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后再看一下&lt;code&gt;object-c&lt;/code&gt;的BLOCK:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;- (void)foo {
    NSInteger x = 1;

    void (^f) (NSInteger *) = ^(NSInteger *x)
    {
      x = 4; // 异常  
      NSLog(@&amp;quot;foodname:%@&amp;quot;, x);
    };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有意思吧。&lt;/p&gt;

&lt;p&gt;这样既能完成传值，又成功的避开了作用域的问题。&lt;/p&gt;

&lt;p&gt;当然，本质上来讲，这已经不是闭包了。&lt;code&gt;java&lt;/code&gt;里&lt;code&gt;onChang&lt;/code&gt;中的&lt;code&gt;x&lt;/code&gt;和定义的&lt;code&gt;x&lt;/code&gt;其实已经不是一个内存了，而我们需要的不是一个内存，而是一个相同的值。&lt;/p&gt;

&lt;p&gt;这也是我为什么将实现两个字打上了引号。&lt;/p&gt;

&lt;p&gt;贴一下对于其他语言对于‘类’闭包的结构或者设计：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Callbacks (C)
Local classes and Lambda functions (Java)
Blocks (C, C++, Objective-C 2.0)
Delegates (C#, D)
Function objects (C++)
Inline agents (Eiffel)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;思考:9832bcef4d84f38f7ad4bc607eea0d15&#34;&gt;思考&lt;/h3&gt;

&lt;p&gt;说两句感悟，大家随便感受一下。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;所谓的设计模式也好，这种和闭包语法类似的东西也好。原因大多不是语言设计者要装x而搞出来的，大多数都是因为，内建不够。一个语言设计模式越多，或者说，为了一种实现折腾的过程越多，其实越代表语言的局限性越大。&lt;/li&gt;
&lt;li&gt;因为同时兼顾Android和iOS开发，所以可以明显感觉到，&lt;code&gt;object-c&lt;/code&gt;的限制太多，或者说内建较差。所以才有swift，我也简单学习了swift的基础语法，可以说内建相当的不错。当然，java也不怎么样，新兴的很多语言对于设计要比java优秀很多（比如，方法可以多个返回）。&lt;/li&gt;
&lt;li&gt;学习其他语言。比我们想象的要简单的多。（抽空单独出文章）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;mdash;-—-&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>