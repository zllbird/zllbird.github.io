<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Coder-bird</title>
    <link>https://zllbird.github.io/post/</link>
    <description>Recent content in Posts on Coder-bird</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2015 Copyright Text</copyright>
    <lastBuildDate>Wed, 17 Feb 2016 19:48:42 +0800</lastBuildDate>
    <atom:link href="https://zllbird.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>美人鱼和周星驰</title>
      <link>https://zllbird.github.io/2016/02/17/%E7%BE%8E%E4%BA%BA%E9%B1%BC%E5%92%8C%E5%91%A8%E6%98%9F%E9%A9%B0/</link>
      <pubDate>Wed, 17 Feb 2016 19:48:42 +0800</pubDate>
      
      <guid>https://zllbird.github.io/2016/02/17/%E7%BE%8E%E4%BA%BA%E9%B1%BC%E5%92%8C%E5%91%A8%E6%98%9F%E9%A9%B0/</guid>
      <description>

&lt;h2 id=&#34;美人鱼和周星驰:a2af5027f0faa22ae57b2d151d2a1457&#34;&gt;美人鱼和周星驰&lt;/h2&gt;

&lt;p&gt;大年初一，便兴趣盎然的去看了——美人鱼。&lt;/p&gt;

&lt;p&gt;我是星爷的影迷，粉丝，脑残粉，（所以写这篇文字里基本都是各种顶膜崇拜），自然会在上映第一天就屁颠屁颠的去看了这部16年的大作，美人鱼。&lt;/p&gt;

&lt;p&gt;随后，回到家后，借着大年这些天无聊的时间，又陆陆续续的把功夫，喜剧之王，少林足球，大话西游再lu了一遍。看完后，脑子嗡嗡的，便写了这几个字。&lt;/p&gt;

&lt;p&gt;我依旧在豆瓣上给了5分，虽然我觉得它不值这个分数，大概也就4分，甚至不足4分，但我是脑残粉嘛。&lt;/p&gt;

&lt;p&gt;美人鱼开篇很多老梗，随后电影里很多很多老梗。开篇里，拿起咸鱼，然后馆长从浴缸里出水时那特渣的特效，都是以前影片里的影子。&lt;/p&gt;

&lt;p&gt;当我看到，珊刺杀富豪轩的那组戏时，我又无耻的笑了。尤其是看到，林子聪出来的那个瞬间，笑的我竟然感动了，（当年就是这个死胖子）。豆瓣说好多评价较低的说都是些老梗，这组戏应该是最为明显的了，功夫中林子聪也是这样，把我们的星爷扎的不要不要的。只不过这次是个女孩，看着还略微有点疼。&lt;/p&gt;

&lt;p&gt;说抄袭的&amp;hellip;一边去，自己抄自己的都叫抄袭了，你还要不要人家拍电影了&amp;hellip;&lt;/p&gt;

&lt;p&gt;说没创意的&amp;hellip;那要看你怎么定义创意了，如果非说从0到1是没创意。那我也觉得星爷这次这的没创意，不过星爷老了，我对这个有没有创意，要求不高。看完后我还是能哈哈笑出来，我就觉得挺好。&lt;/p&gt;

&lt;p&gt;珊和富豪在游乐场边吃烧鸡，飙歌那段，真的是满满的搞笑和纯爱。这种简单加暴力的方式去诠释纯爱和眷恋，简直就跟闹着玩似得。记得以前在一篇文字中看到，李安说周星驰总是弄一些小孩子的玩意。大概，就是说星爷这种闹着玩的把爱表达了吧。&lt;/p&gt;

&lt;p&gt;真的很喜欢这段，如果爱可以这么笑的看完，为啥非要那么多撕心裂肺呢。&lt;/p&gt;

&lt;p&gt;说完了好的，说点不好的。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;期待本身就是最大的负担和失望。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;星爷这部电影，没那么好。尤其是又看了几部以前的电影，更加显得没那么好。美人鱼结尾的确有些凌乱，好多想表达的东西，都没表达出来。不够深刻，或者说，不够星爷的惯常的那种深刻。&lt;/p&gt;

&lt;p&gt;读懂了结局，读的太懂了，甚至还没来得及回味。这种感觉并不舒服。&lt;/p&gt;

&lt;p&gt;无论是大话西游还是喜剧之王，更不用说功夫。看完后，总有一些东西仿佛明白了，又仿佛还差那么一点点，忍不住想再看一遍。美人鱼缺的大概就是这种再来一遍的冲动。&lt;/p&gt;

&lt;p&gt;有人说，这是星爷境界太高，咱悟不到。也有人说，这是星爷返璞归真，无招胜有招。当然，也有人说，江郎才尽，思绪枯涸了，搞不出来了。&lt;/p&gt;

&lt;p&gt;聊两句我眼里的吧。&lt;/p&gt;

&lt;p&gt;无论我多么不愿意承认，星爷的巅峰的的确确已经过去了。喜剧之王和功夫，成就了太多东西，也压榨了太多。（这两部影片一直是我的大爱）&lt;/p&gt;

&lt;p&gt;也可以说，最让人敬畏的星爷和星爷的电影时代过去了。那敬畏之后呢？&lt;/p&gt;

&lt;p&gt;从星仔到星爷，创作或许是有起伏，但认真却是从一而终。星爷的认真，真真切切从未变过。也是这种奇怪的认真在里面，保证了星爷的作品只有两个档——优秀和卓越。&lt;/p&gt;

&lt;p&gt;这部美人鱼，真的称不上卓越，但说它优秀绝对没有问题。&lt;/p&gt;

&lt;p&gt;至于卓越嘛&amp;hellip;怎么讲呢？可遇不可求。因为在我看来，艺术上的卓越除了足够的实力和能力以外，还需要被长时间挤压的那种无法宣泄的灵感，在一次意外的碰撞后，喷涌而出，铸就卓越！&lt;/p&gt;

&lt;p&gt;所以，追求卓越本身就是一件很奢侈，也很痛快的事儿。&lt;/p&gt;

&lt;p&gt;而要求星爷的作品都卓越…也有点要求过高了&amp;hellip;&lt;/p&gt;

&lt;p&gt;但&amp;hellip;&lt;/p&gt;

&lt;p&gt;星爷下一部作品肯定是一部卓越的作品！因为&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;崇拜本身就是盲目的，不是吗？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;2016.2.10&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>闭包，编程思考</title>
      <link>https://zllbird.github.io/2016/01/20/%E9%97%AD%E5%8C%85%E7%BC%96%E7%A8%8B%E6%80%9D%E8%80%83/</link>
      <pubDate>Wed, 20 Jan 2016 13:30:51 +0800</pubDate>
      
      <guid>https://zllbird.github.io/2016/01/20/%E9%97%AD%E5%8C%85%E7%BC%96%E7%A8%8B%E6%80%9D%E8%80%83/</guid>
      <description>

&lt;h2 id=&#34;闭包-编程思考:9832bcef4d84f38f7ad4bc607eea0d15&#34;&gt;闭包，编程思考&lt;/h2&gt;

&lt;p&gt;缘由：经常会文章里看到闭包，对闭包有种感念，但有时候会绕进去。正好加上，android端的构建使用了gradle，gradle脚本基本上都是由闭包构成和撰写的，便研究了一番。更加巧合的是，参与iOS问题讨论的时候，发现了Block这种编写方式，越发觉得这些都是速途同归的玩意。&lt;/p&gt;

&lt;h3 id=&#34;摘要:9832bcef4d84f38f7ad4bc607eea0d15&#34;&gt;摘要：&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;闭包定义&lt;/li&gt;
&lt;li&gt;解读闭包&lt;/li&gt;
&lt;li&gt;闭包的意义&lt;/li&gt;
&lt;li&gt;不同语言对于闭包的另类实现&lt;/li&gt;
&lt;li&gt;思考&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;闭包定义:9832bcef4d84f38f7ad4bc607eea0d15&#34;&gt;闭包定义&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Closure_(computer_programming&#34;&gt;Wiki上闭包的解读（很精彩）&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;闭包的定义：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;closures&lt;/strong&gt; (also &lt;strong&gt;lexical closures&lt;/strong&gt; or &lt;strong&gt;function closures&lt;/strong&gt;) are a technique for implementing &lt;a href=&#34;https://en.wikipedia.org/wiki/Lexically_scoped&#34;&gt;lexically scoped&lt;/a&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Name_binding&#34;&gt;name binding&lt;/a&gt; in languages with &lt;a href=&#34;https://en.wikipedia.org/wiki/First-class_function&#34;&gt;first-class functions&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;可以给个中文版本的：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;闭包，是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;解读闭包:9832bcef4d84f38f7ad4bc607eea0d15&#34;&gt;解读闭包&lt;/h3&gt;

&lt;p&gt;好吧好吧，无论是英文还是中文，读起来感觉都特别的绕口，理解起来就更绕口了。&lt;/p&gt;

&lt;p&gt;还是直接暴力点吧，直接来代码吧：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;function startAt(x)
   function incrementBy(y)
       return x + y
   return incrementBy

variable closure1 = startAt(1)
variable closure2 = startAt(5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;这是基于python的闭包的写法。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;（在我的接触中，python语言是较为简单的，入门比较低，即便没有入门，看代码也不是困难，所以拿python举例，当然，建议大家都学学这个语言，一般一个星期写简单的程序就没问题了）&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;（python中，缩进代表 {} 符号）&lt;/em&gt;&lt;/p&gt;

&lt;h5 id=&#34;解读:9832bcef4d84f38f7ad4bc607eea0d15&#34;&gt;解读：&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;startAt&lt;/code&gt;是一个函数，或者叫方法。它的返回值也是一个函数，或者叫，它返回一个函数类型的值。&lt;/p&gt;

&lt;p&gt;那么有意思的来了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;closure1(3) = 4
closure2(3) = 8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那么，&lt;code&gt;startAt&lt;/code&gt;到底是什么？&lt;/p&gt;

&lt;p&gt;解释它之前，先解释一下变量closure1 和变量 closure2&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;closure1 = 1 + 参数
closure2 = 5 + 参数
//所以 closure2(3) = 5 + 3 = 8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以发觉，&lt;code&gt;startAt&lt;/code&gt;是定义了一种加法。但属于它的变量&lt;code&gt;x&lt;/code&gt;却离开了&lt;code&gt;startAt&lt;/code&gt;一直和&lt;code&gt;closure1&lt;/code&gt;和&lt;code&gt;closure2&lt;/code&gt;存在，赶紧回去看一下刚才最初的定义。&lt;/p&gt;

&lt;p&gt;下面是我最喜欢的一段对于闭包的解读：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Closures are typically implemented with a special &lt;a href=&#34;https://en.wikipedia.org/wiki/Data_structure&#34;&gt;data structure&lt;/a&gt; that contains a &lt;a href=&#34;https://en.wikipedia.org/wiki/Function_pointer&#34;&gt;pointer to the function code&lt;/a&gt;, plus a representation of the function&amp;rsquo;s lexical environment (i.e., the set of available variables) at the time when the closure was created. The referencing environment &lt;a href=&#34;https://en.wikipedia.org/wiki/Name_binding&#34;&gt;binds&lt;/a&gt; the non-local names to the corresponding variables in the lexical environment at the time the closure is created, additionally extending their lifetime to at least as long as the lifetime of the closure itself. When the closure is *entered* at a later time, possibly with a different lexical environment, the function is executed with its non-local variables referring to the ones captured by the closure, not the current environment.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;闭包的意义:9832bcef4d84f38f7ad4bc607eea0d15&#34;&gt;闭包的意义&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;因为闭包只有在被调用时才执行操作，即“&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%83%B0%E6%80%A7%E6%B1%82%E5%80%BC&#34;&gt;惰性求值&lt;/a&gt;”，所以它可以被用来定义控制结构。例如：在&lt;a href=&#34;https://zh.wikipedia.org/wiki/Smalltalk&#34;&gt;Smalltalk&lt;/a&gt;语言中，所有的控制结构，包括分歧条件(if/then/else)和循环(while和for)，都是通过闭包实现的。用户也可以使用闭包定义自己的控制结构。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;感受一下，一会儿看到各个语言的实现，就能有那种醍醐灌顶的感觉了。&lt;/p&gt;

&lt;h3 id=&#34;不同语言对于闭包的另类实现:9832bcef4d84f38f7ad4bc607eea0d15&#34;&gt;不同语言对于闭包的另类实现&lt;/h3&gt;

&lt;p&gt;解读完闭包了，聊一下，这个玩意最大的问题是什么？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;作用域&lt;/strong&gt; &amp;ndash;&amp;gt; 自由变量的作用域，导致自由变量的混乱管理。&lt;/p&gt;

&lt;p&gt;我将先以&lt;code&gt;javascript&lt;/code&gt;为例，介绍最大的问题。&lt;/p&gt;

&lt;p&gt;然后，我再会分别介绍一下&lt;code&gt;java&lt;/code&gt;以及&lt;code&gt;Object-C&lt;/code&gt;为例子，解释一下其他语言是如何另类实现闭包，并怎么处理作用域的问题。&lt;/p&gt;

&lt;h4 id=&#34;javascript-的闭包:9832bcef4d84f38f7ad4bc607eea0d15&#34;&gt;&lt;code&gt;javascript&lt;/code&gt;的闭包&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// ECMAScript , javascript
var f, g;
function foo() {
  var x; // 
  f = function() { x = x + 1 ; return x; }; //
  g = function() { x = x +5 ; return x; };	//
  x = 1;
  alert(&#39;inside foo, call to f(): &#39; + f()); // 2
}
foo();
alert(&#39;call to g(): &#39; + g());  // 7
alert(&#39;call to f(): &#39; + f());  // 8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到结果为。&lt;/p&gt;

&lt;p&gt;如果我将输出顺序换一下呢？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;alert(&#39;call to f(): &#39; + f()); // 3
alert(&#39;call to g(): &#39; + g()); // 8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;给你们两分钟时间，再想一下。&lt;/p&gt;

&lt;p&gt;可以看到。在&lt;code&gt;foo&lt;/code&gt;中声明的变量&lt;code&gt;x&lt;/code&gt;，由于闭包的存在，导致&lt;code&gt;x&lt;/code&gt;的作用域一直扩展到程序的底部，在&lt;code&gt;foo&lt;/code&gt;函数结束后还一直坚挺的活着。（这是我们刚才已经知道了的。）&lt;/p&gt;

&lt;p&gt;不仅活着，还可以被更改，然后再使用！&lt;/p&gt;

&lt;p&gt;那么问题到底是什么呢？&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;难以管理。&lt;/li&gt;
&lt;li&gt;持有。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;所以&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;java-以及-object-c-对闭包的-实现:9832bcef4d84f38f7ad4bc607eea0d15&#34;&gt;&lt;code&gt;JAVA&lt;/code&gt; 以及&lt;code&gt;Object-C&lt;/code&gt;对闭包的‘实现’&lt;/h3&gt;

&lt;p&gt;直接说，&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;java&lt;/code&gt;中是 匿名内部类&lt;/li&gt;
&lt;li&gt;&lt;code&gt;object-c&lt;/code&gt;中是 Block运用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以基于这点来讲，&lt;code&gt;java&lt;/code&gt;更加面向对象一点，真的是很努力做到一切都是对象了。&lt;/p&gt;

&lt;p&gt;先看一下&lt;code&gt;java&lt;/code&gt;代码吧：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public void foo(){
   final int x = 1 ; //

  //f(lambda (x) -&amp;gt; person.setAge(x));

  f(new OnChangListner(){
  		void onChang(){
  			person.setAge(x);
		}
	});

  // 当然方法f必须事先定义好
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后再看一下&lt;code&gt;object-c&lt;/code&gt;的BLOCK:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;- (void)foo {
    NSInteger x = 1;

    void (^f) (NSInteger *) = ^(NSInteger *x)
    {
      x = 4; // 异常  
      NSLog(@&amp;quot;foodname:%@&amp;quot;, x);
    };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有意思吧。&lt;/p&gt;

&lt;p&gt;这样既能完成传值，又成功的避开了作用域的问题。&lt;/p&gt;

&lt;p&gt;当然，本质上来讲，这已经不是闭包了。&lt;code&gt;java&lt;/code&gt;里&lt;code&gt;onChang&lt;/code&gt;中的&lt;code&gt;x&lt;/code&gt;和定义的&lt;code&gt;x&lt;/code&gt;其实已经不是一个内存了，而我们需要的不是一个内存，而是一个相同的值。&lt;/p&gt;

&lt;p&gt;这也是我为什么将实现两个字打上了引号。&lt;/p&gt;

&lt;p&gt;贴一下对于其他语言对于‘类’闭包的结构或者设计：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Callbacks (C)
Local classes and Lambda functions (Java)
Blocks (C, C++, Objective-C 2.0)
Delegates (C#, D)
Function objects (C++)
Inline agents (Eiffel)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;思考:9832bcef4d84f38f7ad4bc607eea0d15&#34;&gt;思考&lt;/h3&gt;

&lt;p&gt;说两句感悟，大家随便感受一下。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;所谓的设计模式也好，这种和闭包语法类似的东西也好。原因大多不是语言设计者要装x而搞出来的，大多数都是因为，内建不够。一个语言设计模式越多，或者说，为了一种实现折腾的过程越多，其实越代表语言的局限性越大。&lt;/li&gt;
&lt;li&gt;因为同时兼顾Android和iOS开发，所以可以明显感觉到，&lt;code&gt;object-c&lt;/code&gt;的限制太多，或者说内建较差。所以才有swift，我也简单学习了swift的基础语法，可以说内建相当的不错。当然，java也不怎么样，新兴的很多语言对于设计要比java优秀很多（比如，方法可以多个返回）。&lt;/li&gt;
&lt;li&gt;学习其他语言。比我们想象的要简单的多。（抽空单独出文章）&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>【Android】使用Gradle进行配置</title>
      <link>https://zllbird.github.io/2016/01/14/android%E4%BD%BF%E7%94%A8gradle%E8%BF%9B%E8%A1%8C%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Thu, 14 Jan 2016 18:20:35 +0800</pubDate>
      
      <guid>https://zllbird.github.io/2016/01/14/android%E4%BD%BF%E7%94%A8gradle%E8%BF%9B%E8%A1%8C%E9%85%8D%E7%BD%AE/</guid>
      <description>

&lt;h2 id=&#34;android-使用gradle进行配置-记录:b2d32e58210a46d52cedf8f96f12aada&#34;&gt;【Android】使用Gradle进行配置（记录）&lt;/h2&gt;

&lt;h3 id=&#34;摘要:b2d32e58210a46d52cedf8f96f12aada&#34;&gt;摘要&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;介绍&lt;/li&gt;
&lt;li&gt;需求&lt;/li&gt;
&lt;li&gt;配置工程&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;概念介绍:b2d32e58210a46d52cedf8f96f12aada&#34;&gt;概念介绍&lt;/h3&gt;

&lt;p&gt;直接推荐几篇文章入门。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://android.jobbole.com/81436/&#34;&gt;深入理解Android的Gradle&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://pkaq.github.io/gradledoc/docs/userguide/userguide.html&#34;&gt;Gradle 用户手册（含部分翻译）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ADT已经不在继续更新了。自然而然的，Android Studio成了新贵。虽说还是有一些别的IDE和别的方式去编写和构建Android，但由于谷歌的维护和升级，AS成了绝大多数Android开发者的选择。对于小团队来说（本人就是在小小小团队），AS + GRADLE 成了现阶段主流。&lt;/p&gt;

&lt;p&gt;这是记录，所以概念型的东西就不做介绍了。&lt;/p&gt;

&lt;h3 id=&#34;需求:b2d32e58210a46d52cedf8f96f12aada&#34;&gt;需求&lt;/h3&gt;

&lt;p&gt;由于团队本身有好多服务器（*开发，灰度，线上*），再加上有很多三方的引用（如：我们团队IM引用了环信），另外还有一些日志系统的调控等，再加上长时间不同人员对代码开发，导致这些配置非常混乱，散落于不同的类，还有一些在&lt;code&gt;AndroidManifies.xml&lt;/code&gt;等文件中，所以导致导报经常会出现一些莫名其妙的错误。&lt;/p&gt;

&lt;p&gt;需求：实现 &amp;gt; 能合理地配置这些，并使用配置文件进行统一管理 &amp;gt;的需求。&lt;/p&gt;

&lt;p&gt;目标如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;只需更改一处（一行）就能实现不同需求打包的切换！（最重要）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;简单&lt;/li&gt;
&lt;li&gt;不影响Studio相关联的&lt;code&gt;gradle&lt;/code&gt;文件（&lt;code&gt;build.gradle&lt;/code&gt;一旦改变，就会导致重新编译），但又可以及时更改相关配置。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;配置工程:b2d32e58210a46d52cedf8f96f12aada&#34;&gt;配置工程&lt;/h3&gt;

&lt;h4 id=&#34;配置-buildconfig:b2d32e58210a46d52cedf8f96f12aada&#34;&gt;配置&lt;code&gt;BuildConfig&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;BuildConfig&lt;/code&gt; 这个类是工程自动构建生成的。可以具体看一下这个类。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;/**
 * Automatically generated file. DO NOT MODIFY
 */
package ****;

public final class BuildConfig {
  public static final boolean DEBUG = Boolean.parseBoolean(&amp;quot;true&amp;quot;);
  public static final String APPLICATION_ID = &amp;quot;**.builddemo&amp;quot;;
  public static final String BUILD_TYPE = &amp;quot;debug&amp;quot;;
  public static final String FLAVOR = &amp;quot;&amp;quot;;
  public static final int VERSION_CODE = 1;
  public static final String VERSION_NAME = &amp;quot;1.0&amp;quot;;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注释说：这个类是自动生成的，别动，动了也没什么用~~~&lt;/p&gt;

&lt;p&gt;然后可以看到，这里&lt;code&gt;DEBUG&lt;/code&gt;,&lt;code&gt;APPLICATION_ID&lt;/code&gt;,&lt;code&gt;BUILD_TYPE&lt;/code&gt;,&lt;code&gt;FLAVOR&lt;/code&gt;,&lt;code&gt;VERSION_CODE&lt;/code&gt;,&lt;code&gt;VERSION_NAME&lt;/code&gt;这些常量，这些常量有的是我们在&lt;code&gt;AndroidManifest.xml&lt;/code&gt;中配置的，有些是我们在module下的&lt;code&gt;build.grade&lt;/code&gt;中配置的（当然，这些其实全部可以在&lt;code&gt;build.gradle&lt;/code&gt;中进行配置）&lt;/p&gt;

&lt;p&gt;就像这个样子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;android {
    compileSdkVersion 23
    buildToolsVersion &amp;quot;23.0.2&amp;quot;

    defaultConfig {
        applicationId &amp;quot;**.builddemo&amp;quot;
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 1
        versionName &amp;quot;1.0&amp;quot;
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-	rules.pro&#39;
        }
    }

    productFlavors {
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于工程中需要&lt;code&gt;versionCode&lt;/code&gt;参数，所以&lt;code&gt;BuildConfig&lt;/code&gt;便提供了很大的便利。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip: defaultConfig{} 这个闭包就是配置工程参数的，也就是直接对应&lt;code&gt;BuildConfig&lt;/code&gt;的&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;既然如此，如果能给&lt;code&gt;BuildConfig&lt;/code&gt;配置自定义的参数，那么需求就解决了一半了！&lt;/p&gt;

&lt;p&gt;显然，Android团队也肯定会留下一些自定义的API，保证大家能  “ 随便乱搞”。&lt;/p&gt;

&lt;p&gt;下面是自定义API写法和使用&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;defaultConfig {
  
       ...
  
		// 自定义的方法就是 buildConfigField ，这种是groovy写法
        // 三个参数分别是 type (类型) ， name (命名) ， value(值)
        buildConfigField &#39;int&#39; , &#39;SEVER_CONFIG&#39; , &amp;quot;1&amp;quot;
  		
  		// 当然写成这种更容易看懂,这种写法更像java。
  		// 三个参数分别是 type (类型) ， name (命名) ， value(值)
  		buildConfigField(&amp;quot;int&amp;quot; , &amp;quot;SEVER_CONFIG&amp;quot; , &amp;quot;1&amp;quot;)
  
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重新构建后，可以看到&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public final class BuildConfig {
  public static final boolean DEBUG = Boolean.parseBoolean(&amp;quot;true&amp;quot;);
  public static final String APPLICATION_ID = &amp;quot;**.builddemo&amp;quot;;
  public static final String BUILD_TYPE = &amp;quot;debug&amp;quot;;
  public static final String FLAVOR = &amp;quot;&amp;quot;;
  public static final int VERSION_CODE = 1;
  public static final String VERSION_NAME = &amp;quot;1.0&amp;quot;;
  // Fields from default config.
  public static final int SEVER_CONFIG = 1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到&lt;code&gt;int SEVER_CONFIG = 1;&lt;/code&gt; 正好对应 &lt;code&gt;&#39;int&#39; , &#39;SEVER_CONFIG&#39; , &amp;quot;1&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注意， “1” 对应的是 1 ， ’ “1” ‘ 对应的是 “1”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;是不是很简单。&lt;/p&gt;

&lt;p&gt;简单看一下原理吧。&lt;/p&gt;

&lt;p&gt;原来是本身构建的时候，android会将闭包转化成相关类，并调用方法。可以看一下&lt;code&gt;buildConfigField&lt;/code&gt;这个方法&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// -- DSL Methods. TODO remove once the instantiator does what I expect it to do.

    /**
     * Adds a new field to the generated BuildConfig class.
     *
     * The field is generated as:
     *
     * &amp;lt;type&amp;gt; &amp;lt;name&amp;gt; = &amp;lt;value&amp;gt;;
     *
     * This means each of these must have valid Java content. If the type is a String, then the
     * value should include quotes.
     *
     * @param type the type of the field
     * @param name the name of the field
     * @param value the value of the field
     */
    public void buildConfigField(
            @NonNull String type,
            @NonNull String name,
            @NonNull String value) {
        ClassField alreadyPresent = getBuildConfigFields().get(name);
        if (alreadyPresent != null) {
            String flavorName = getName();
            if (BuilderConstants.MAIN.equals(flavorName)) {
                logger.info(
                        &amp;quot;DefaultConfig: buildConfigField &#39;{}&#39; value is being replaced: {} -&amp;gt; {}&amp;quot;,
                        name, alreadyPresent.getValue(), value);
            } else {
                logger.info(
                        &amp;quot;ProductFlavor({}): buildConfigField &#39;{}&#39; &amp;quot;
                                + &amp;quot;value is being replaced: {} -&amp;gt; {}&amp;quot;,
                        flavorName, name, alreadyPresent.getValue(), value);
            }
        }
        addBuildConfigField(AndroidBuilder.createClassField(type, name, value));
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这是&lt;code&gt;ProductFlavor&lt;/code&gt;这个类里的方法，不详细说了，大家其实直接看注释就ok了。&lt;/p&gt;

&lt;h4 id=&#34;解决-androidmanifest-xml-的-meta-data-等:b2d32e58210a46d52cedf8f96f12aada&#34;&gt;解决&lt;code&gt;AndroidManifest.xml&lt;/code&gt;的&lt;code&gt;Meta-data&lt;/code&gt;等&lt;/h4&gt;

&lt;p&gt;拿&lt;code&gt;AndroidManifest.xml&lt;/code&gt;的&lt;code&gt;Meta-data&lt;/code&gt;出来说，其实别的字段也是一样的。&lt;/p&gt;

&lt;p&gt;还是&lt;code&gt;build.gradle&lt;/code&gt;中的配置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;defaultConfig {
    applicationId &amp;quot;zhulonglong.builddemo&amp;quot;
    minSdkVersion 15
    targetSdkVersion 23
    versionCode 1
    versionName &amp;quot;1.0&amp;quot;

    buildConfigField &#39;int&#39; , &#39;SEVER_CONFIG&#39; , &amp;quot;1&amp;quot;
    manifestPlaceholders = [ CHANNEL_VALUE : &amp;quot;QQ&amp;quot; ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对应的&lt;code&gt;AndroidManifest.xml&lt;/code&gt;的&lt;code&gt;Meta-data&lt;/code&gt;数据是&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;application
        android:allowBackup=&amp;quot;true&amp;quot;
        android:icon=&amp;quot;@mipmap/ic_launcher&amp;quot;
        android:label=&amp;quot;@string/app_name&amp;quot;
        android:supportsRtl=&amp;quot;true&amp;quot;
        android:theme=&amp;quot;@style/AppTheme&amp;quot;&amp;gt;

       ...
        &amp;lt;meta-data android:name=&amp;quot;CHANNEL&amp;quot;
                   android:value=&amp;quot;${CHANNEL_VALUE}&amp;quot;/&amp;gt;
&amp;lt;/application&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;${}&lt;/code&gt;是替代符，在&lt;code&gt;defaultConfig&lt;/code&gt;中&lt;code&gt;manifestPlaceholders&lt;/code&gt;便是对应的AndroidManifest.xml配置文件。&lt;/p&gt;

&lt;h4 id=&#34;合并-新建-config-gradle-统一管理所有的配置:b2d32e58210a46d52cedf8f96f12aada&#34;&gt;合并，新建&lt;code&gt;config.gradle&lt;/code&gt;统一管理所有的配置&lt;/h4&gt;

&lt;p&gt;创建一个&lt;code&gt;config.gradle&lt;/code&gt;的好处：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;无缝衔接&lt;code&gt;gradle&lt;/code&gt;构建系统&lt;/li&gt;
&lt;li&gt;android studio 方便查看更改，且不会引起重新构建（IDE 自动识别的都是&lt;code&gt;build.gradle&lt;/code&gt;文件，对于别的gradle文件不会在乎）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我创建的&lt;code&gt;config.grade&lt;/code&gt;是在项目根录下的。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;
def DEV = 0
def ONLINE = 2

ext{
    SEVER_CONFIG = ONLINE
    CHANNEL_DEV = &amp;quot;CHANNEL_DEV&amp;quot;
    CHANNEL_ONLINE = &amp;quot;CHANNEL_ONLINE&amp;quot;

    if (SEVER_CONFIG == DEV){
        CHANNEL_NAME = CHANNEL_DEV
    }else {
        CHANNEL_NAME = CHANNEL_ONLINE
    }

}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ext&lt;/code&gt;保证了别的&lt;code&gt;gradle&lt;/code&gt;能顺利使用这个属性&lt;/p&gt;

&lt;p&gt;在需要的&lt;code&gt;build.gradle&lt;/code&gt;中导入&lt;code&gt;config.gradle&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;apply from: rootProject.getRootDir().getAbsolutePath() + &amp;quot;/config.gradle&amp;quot;

println &amp;quot;Project Name &amp;quot; + getName()
println &amp;quot;Project Path &amp;quot; + getPath()

android {
    compileSdkVersion 23
    buildToolsVersion &amp;quot;23.0.2&amp;quot;

    defaultConfig {
        applicationId &amp;quot;**.builddemo&amp;quot;
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 1
        versionName &amp;quot;1.0&amp;quot;

        buildConfigField &#39;int&#39; , &#39;SEVER_CONFIG&#39; , &amp;quot;${SEVER_CONFIG}&amp;quot;

        manifestPlaceholders = [ CHANNEL_VALUE : &amp;quot;${CHANNEL_NAME}&amp;quot; ]

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;
        }
    }

    productFlavors {


    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后就可以直接引用这个属性了。&lt;/p&gt;

&lt;p&gt;如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;buildConfigField &#39;int&#39; , &#39;SEVER_CONFIG&#39; , &amp;quot;${SEVER_CONFIG}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;SEVER_CONFIG&lt;/code&gt;就是在&lt;code&gt;config.gradle&lt;/code&gt;中定义的。&lt;/p&gt;

&lt;p&gt;到此为止，目的达到了。&lt;/p&gt;

&lt;p&gt;所有的配置都在文件&lt;code&gt;config.gradle&lt;/code&gt;中进行更改。当然，还需要在里面定义一个总开关，将具体参数配置分块。&lt;/p&gt;

&lt;p&gt;在代码中可以直接使用&lt;code&gt;BuildConfig&lt;/code&gt;进行相关使用。&lt;/p&gt;

&lt;p&gt;当然，更改&lt;code&gt;config.gradle&lt;/code&gt;不会进行重新构建，是不是棒棒哒！！！&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>关于苹果证书</title>
      <link>https://zllbird.github.io/2016/01/11/%E5%85%B3%E4%BA%8E%E8%8B%B9%E6%9E%9C%E8%AF%81%E4%B9%A6/</link>
      <pubDate>Mon, 11 Jan 2016 20:43:23 +0800</pubDate>
      
      <guid>https://zllbird.github.io/2016/01/11/%E5%85%B3%E4%BA%8E%E8%8B%B9%E6%9E%9C%E8%AF%81%E4%B9%A6/</guid>
      <description>

&lt;h2 id=&#34;关于苹果证书:e17706f6098990c313a029f4b1ce2f78&#34;&gt;关于苹果证书&lt;/h2&gt;

&lt;h3 id=&#34;摘要:e17706f6098990c313a029f4b1ce2f78&#34;&gt;摘要：&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;苹果证书简介&lt;/li&gt;
&lt;li&gt;具体解读&lt;/li&gt;
&lt;li&gt;如何优雅地使用&lt;/li&gt;
&lt;li&gt;关于苹果证书企业版的那些事儿&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;苹果证书简介:e17706f6098990c313a029f4b1ce2f78&#34;&gt;苹果证书简介&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;开发者证书（分为开发和发布两种，类型为&lt;strong&gt;ios Development,ios Distribution&lt;/strong&gt;），这个是最基础的，不论是真机调试，还是上传到appstore都是需要的，是一个基证书，用来证明自己开发者身份的。&lt;/li&gt;
&lt;li&gt;appID,这是每一个应用的独立标识，在设置项中可以配置该应用的权限，比如是否用到了PassBook,GameCenter,以及更常见的push服务，如果选中了push服务，那么就可以创建生成下面第3条所提到的推送证书，所以，在所有和推送相关的配置中，首先要做的就是先开通支持推送服务的appID。&lt;/li&gt;
&lt;li&gt;推送证书（分为开发和发布两种，类型分别为&lt;strong&gt;APNs Development ios,APNs Distribution ios&lt;/strong&gt;）,该证书在appID配置中创建生成，和开发者证书一样，安装到开发电脑上；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Provisioning Profiles&lt;/strong&gt;,这个东西是很有苹果特色的一个东西，我一般称之为PP文件，该文件将appID,开发者证书，硬件Device绑定到一块儿，在开发者中心配置好后可以添加到Xcode上，也可以直接在Xcode上连接开发者中心生成，真机调试时需要在PP文件中添加真机的udid；是真机调试和必架必备之珍品&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;具体解读:e17706f6098990c313a029f4b1ce2f78&#34;&gt;具体解读&lt;/h3&gt;

&lt;p&gt;首先先说一下，苹果账号分两种，一种是$99 ,另一种是$299。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;$99&lt;/strong&gt;，个人或公司账号。可发布到App Store，这是最重要的。但不可以无限给设备分发，只能分发100个设备，根据UUID来唯一识别设备。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;$299&lt;/strong&gt;，企业账号。&lt;strong&gt;不可以发布到App Store&lt;/strong&gt;，这是最重要的。但可以无限分发，无限分发，无限分发。（但iOS的企业开发者信任调整了，所以虽可以任意分发，但需要安装后，手动在设置里先信任开发者，这点很讨厌）&lt;/p&gt;

&lt;p&gt;然后开始解读上面提到的四种证书，先上图看一下，开发者中心的目录解读。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zllbird.github.io/images/apple_cerreq/apple_cerreq_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ok，基础了解之后。具体讲述一下，这堆乱起八糟的东西到底有什么用。&lt;/p&gt;

&lt;p&gt;苹果为了保证开发者（就是交完钱的孩子），能安安全全的开发，开开心心的发布，而不交钱的孩子开发都比较困难，所以搞出了这一大套折腾的东西。&lt;/p&gt;

&lt;h5 id=&#34;certificates-appid-bundle-id-provisioning-profiles-到底是怎么用的呢:e17706f6098990c313a029f4b1ce2f78&#34;&gt;Certificates，AppID(Bundle id)，Provisioning Profiles 。到底是怎么用的呢？&lt;/h5&gt;

&lt;p&gt;Provisioning Profiles，可以理解为安装到苹果设备的认证，通俗讲就是能不能安装到苹果设备，就看Provisioning Profiles这把钥匙能不能用。能用，进门安装。不能，弹出一个提示&lt;strong&gt;无法安装&lt;/strong&gt;，就呵呵哒了。&lt;/p&gt;

&lt;p&gt;既然如此，怎样才能生成一个Provisioning Profiles呢。看一下苹果这边生成Provisioning Profiles需要什么？&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zllbird.github.io/images/apple_cerreq/apple_cerreq_2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zllbird.github.io/images/apple_cerreq/apple_cerreq_3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zllbird.github.io/images/apple_cerreq/apple_cerreq_4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zllbird.github.io/images/apple_cerreq/apple_cerreq_5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;终于好了，将证书Certificates，AppID(Bundle id)，devices都选择完后，绑定到一起，成功召唤出神龙，帮你生成了这把钥匙。&lt;/p&gt;

&lt;p&gt;那这把钥匙到底开的是哪扇门呢？&lt;strong&gt;是代码，是代码，是代码&lt;/strong&gt;！！！&lt;/p&gt;

&lt;p&gt;看一下打包的时候，在哪里用到这个签名，在build setting 下。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zllbird.github.io/images/apple_cerreq/apple_cerreq_6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;注意左上角是代码签名，代码签名！&lt;/p&gt;

&lt;p&gt;所以上面那个图告诉我们的是，谁（*iOS Developer 或者iPhone Distribution*）给这段代码签名了，然后并配上了一把钥匙（Provisioning Profiles 描述文件，可以打开app store上的app，或者 可以打开  XC:AD HOC 私下分发的app等），共同组合一起完成了一个叫扩张名为ipa的打包文件。&lt;/p&gt;

&lt;h3 id=&#34;如何优雅地使用:e17706f6098990c313a029f4b1ce2f78&#34;&gt;如何优雅地使用&lt;/h3&gt;

&lt;p&gt;有这段主要是由于本公司混乱和冗余的证书把整个开发者中心搞得&amp;hellip;简直就是乌烟瘴气。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Certificates 是一定要通过电脑生成证书，然后提交网页签名的。所以，命名一定要特别的长，长到把此证书是何用，用在何处的信息尽量多的写。&lt;/li&gt;
&lt;li&gt;appID ，也是有备注名的，备注名的，备注名的。所以，还是尽量多的写，尽量多的写。&lt;/li&gt;
&lt;li&gt;Provisioning Profiles，尽量不要在网页生成下载，建议直接用Xcode生成。&lt;/li&gt;
&lt;li&gt;协同开发者，下载Provisioning Profiles一定要用Xcode的account管理，一键下载安装。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;（选择xcode —&amp;gt; prefenerces—&amp;gt;accounts—&amp;gt;view details）&lt;/p&gt;

&lt;p&gt;这里就可以下载所有的profiles。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zllbird.github.io/images/apple_cerreq/apple_cerreq_7.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;关于苹果证书企业版的那些事儿:e17706f6098990c313a029f4b1ce2f78&#34;&gt;关于苹果证书企业版的那些事儿&lt;/h3&gt;

&lt;p&gt;刚才提到过，企业版证书就是价值299美元的那个。&lt;/p&gt;

&lt;p&gt;和普通版本没有什么大的区别，就是Provisioning Profiles的生成中多了一个叫做&lt;code&gt;in-house&lt;/code&gt;的发布类型。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zllbird.github.io/images/apple_cerreq/apple_cerreq_8.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;只有这一点区别。&lt;/p&gt;

&lt;p&gt;看一下生成后的描述文件有哪里不一样。可以看到类型不一样！！！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zllbird.github.io/images/apple_cerreq/apple_cerreq_10.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;当然，打包的时候，build setting 中也要同时选中这个版的Provisioning Profiles。&lt;/p&gt;

&lt;p&gt;然后选择&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zllbird.github.io/images/apple_cerreq/apple_cerreq_9.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>CocoaLumberjack的集成和学习</title>
      <link>https://zllbird.github.io/2016/01/09/cocoalumberjack%E7%9A%84%E9%9B%86%E6%88%90%E5%92%8C%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Sat, 09 Jan 2016 14:59:57 +0800</pubDate>
      
      <guid>https://zllbird.github.io/2016/01/09/cocoalumberjack%E7%9A%84%E9%9B%86%E6%88%90%E5%92%8C%E5%AD%A6%E4%B9%A0/</guid>
      <description>

&lt;h2 id=&#34;cocoalumberjack的集成和学习:43299706702588eefa55b6be9b7526b3&#34;&gt;CocoaLumberjack的集成和学习&lt;/h2&gt;

&lt;h3 id=&#34;摘要:43299706702588eefa55b6be9b7526b3&#34;&gt;摘要：&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;介绍以及安装&lt;/li&gt;
&lt;li&gt;集成&lt;/li&gt;
&lt;li&gt;使用&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;介绍以及安装:43299706702588eefa55b6be9b7526b3&#34;&gt;介绍以及安装&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/CocoaLumberjack/CocoaLumberjack&#34;&gt;GitHub地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;强烈建议好好通过Github上的方式安装和使用，github是神器，好好使用，总会飞升。&lt;/p&gt;

&lt;p&gt;CocoaLumberjack，简单说就是日志系统。对于我这种原来是java的工程师来说，就是log4j。之所以使用它，是我对于XCode的极大不满！（打印日志居然没有颜色，而且&amp;hellip;地方那么小，我有两个屏幕有个毛线用。）吐槽结束，说两句CocoaLumberjack特点。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;有分级。能分级打印的日志才叫日志，才能有选择的看嘛。&lt;/li&gt;
&lt;li&gt;能通过插件配色。&lt;strong&gt;全是一个颜色的日志找起来，真的好辛苦&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;能自定义日志输出信息。&lt;strong&gt;有调用类，调用方法，调用行数的日志才是好的日志&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;安装:43299706702588eefa55b6be9b7526b3&#34;&gt;安装&lt;/h4&gt;

&lt;p&gt;请先通过Github上的介绍安装。~&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;建议建议：&lt;/strong&gt; 使用CocoaPods来安装。只需要在&lt;code&gt;Podfile&lt;/code&gt;上填上两行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;platform :ios, &#39;7.0&#39;
pod &#39;CocoaLumberjack&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后终端执行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就完成了。&lt;/p&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;ok，ok，ok….这里肯定会有几个坑。简单说一下。&lt;/p&gt;

&lt;h4 id=&#34;坑:43299706702588eefa55b6be9b7526b3&#34;&gt;坑：&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;请在翻墙的环境下安装。相信我，如果没有翻墙环境，你总会陷入莫名的长时间等待。&lt;/li&gt;
&lt;li&gt;安装过程中，一旦出现以下情况。&lt;img src=&#34;https://zllbird.github.io/images/cocoaLumberjack/1.png&#34; alt=&#34;&#34; /&gt;说明安装并没有成功配置。原因是原来的项目由于各种原因，导致管理的包路径，源路径很有问题，需要根据上述提示进行更改。（这里会经常出问题，都是因为大家习惯了直接将问题放到google或者&lt;a href=&#34;http://stackoverflow.com/&#34;&gt;stackoverflow&lt;/a&gt;找寻答案，本人不建议如此做，先看日志输出，搞清楚到底啥问题才是最重要的），接下来截图是我的修改，本质上就是按照提示进行更改。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://zllbird.github.io/images/cocoaLumberjack/2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zllbird.github.io/images/cocoaLumberjack/3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CocoaPods本身对源码入侵是比较严重的，所以大家也可以使用Carthage。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;集成:43299706702588eefa55b6be9b7526b3&#34;&gt;集成&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;集成也很简单，仍然是建议大家先通过英文文档。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;因为我正在使用的工程还有&lt;code&gt;.pch&lt;/code&gt;预加载头文件的存在，所以我仍然是在这里配置了我的输入和输出等级。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;#ifdef DEBUG
    static const DDLogLevel ddLogLevel = DDLogLevelDebug;
#else
    static const DDLogLevel ddLogLevel = DDLogLevelError;
#endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当然，这种方式正在被淘汰，建议大家可以写到一个宏来配置。&lt;/p&gt;

&lt;p&gt;然后在&lt;code&gt;AppDelegate&lt;/code&gt;中的&lt;code&gt;didFinishLaunchingWithOptions&lt;/code&gt;中初始化。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;#import &amp;lt;CocoaLumberjack/CocoaLumberjack.h&amp;gt;

...
...
...

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
 	[DDLog addLogger:[DDTTYLogger sharedInstance]];
 	[DDLog addLogger:[DDASLLogger sharedInstance]];

    [[DDTTYLogger sharedInstance] setLogFormatter:[LDFormatter new]];
    // And we also enable colors
    [[DDTTYLogger sharedInstance] setColorsEnabled:YES];

    DDFileLogger *fileLogger = [[DDFileLogger alloc] init]; // File Logger
    fileLogger.rollingFrequency = 60 * 60 * 24; // 24 hour rolling
    fileLogger.logFileManager.maximumNumberOfLogFiles = 7;

    [DDLog addLogger:fileLogger];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;完成初始化后，就可以在想要的敌方直接打印结果了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	DDLogVerbose(@&amp;quot;Verbose&amp;quot;);
    DDLogDebug(@&amp;quot;Debug&amp;quot;);
    DDLogInfo(@&amp;quot;Info&amp;quot;);
    DDLogWarn(@&amp;quot;Warn&amp;quot;);
    DDLogError(@&amp;quot;Error&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;使用:43299706702588eefa55b6be9b7526b3&#34;&gt;使用&lt;/h3&gt;

&lt;p&gt;其实到上面为止，使用也已经是说完了。但对于工程来说，打印日志，只有日志信息是不够的。CocoaLumberjack对此做了非常好的优化，只需要简单地配置就基本可以打印出一个较为理想的日志输出。（也就是我开始讲的第3条）&lt;/p&gt;

&lt;h4 id=&#34;配置自定义的formatter:43299706702588eefa55b6be9b7526b3&#34;&gt;&lt;strong&gt;配置自定义的Formatter&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;配置之前，可以先给大家看一下，CocoaLumberjack的日志到底包含了多少信息，有多强大。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface DDLogMessage : NSObject &amp;lt;NSCopying&amp;gt;
{
    // Direct accessors to be used only for performance
    @public
    NSString *_message;
    DDLogLevel _level;
    DDLogFlag _flag;
    NSInteger _context;
    NSString *_file;
    NSString *_fileName;
    NSString *_function;
    NSUInteger _line;
    id _tag;
    DDLogMessageOptions _options;
    NSDate *_timestamp;
    NSString *_threadID;
    NSString *_threadName;
    NSString *_queueLabel;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到，无论是类（&lt;code&gt;_fileName&lt;/code&gt;），还是函数名（&lt;code&gt;_function&lt;/code&gt;）,还有所在的行数（&lt;code&gt;_line&lt;/code&gt;），还有时间，所在线程等等等等，都有。&lt;/p&gt;

&lt;p&gt;接下来就可以自定义Formatter了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;建议大家还是先看Github项目中的自定义&lt;a href=&#34;https://github.com/CocoaLumberjack/CocoaLumberjack/blob/master/Documentation/CustomFormatters.md&#34;&gt;Formatter文档&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MyFormatter.h

@interface MyFormatter : NSObject &amp;lt;DDLogFormatter&amp;gt; {
    int loggerCount;
    NSDateFormatter *threadUnsafeDateFormatter;
}
@end


=======

MyFormatter.m

@implementation MyFormatter

- (NSString *)formatLogMessage:(DDLogMessage *)logMessage {
    NSString *logLevel;
    switch (logMessage-&amp;gt;_flag) {
        case DDLogFlagError    : logLevel = @&amp;quot;Error&amp;quot;; break;
        case DDLogFlagWarning  : logLevel = @&amp;quot;W&amp;quot;; break;
        case DDLogFlagInfo     : logLevel = @&amp;quot;Info&amp;quot;; break;
        case DDLogFlagDebug    : logLevel = @&amp;quot;D&amp;quot;; break;
        default                : logLevel = @&amp;quot;V&amp;quot;; break;
    }

    NSString *dateAndTime = [threadUnsafeDateFormatter stringFromDate:(logMessage-&amp;gt;_timestamp)];
    NSString *logMsg = logMessage-&amp;gt;_message;
    NSString *logFileNmae = logMessage -&amp;gt; _fileName;
    NSString *logFuncation = logMessage -&amp;gt; _function;
    long lineNum = logMessage -&amp;gt; _line;

    return [NSString stringWithFormat:@&amp;quot;%@ %@ :%li %@ %@ :::\n %@ &amp;quot;,logFileNmae, logFuncation,lineNum, logLevel, dateAndTime, logMsg];

}

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;成果秀:43299706702588eefa55b6be9b7526b3&#34;&gt;成果秀&lt;/h3&gt;

&lt;p&gt;最后放几张配置好的结果图秀&lt;/p&gt;

&lt;h4 id=&#34;xcode-输出台的日志:43299706702588eefa55b6be9b7526b3&#34;&gt;xcode 输出台的日志&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://zllbird.github.io/images/cocoaLumberjack/4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;文件日志-模拟器可以直接进入文件然后用-tail-f-查看:43299706702588eefa55b6be9b7526b3&#34;&gt;文件日志（模拟器可以直接进入文件然后用&lt;code&gt;tail -f&lt;/code&gt; 查看）&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://zllbird.github.io/images/cocoaLumberjack/5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>Android自动构建</title>
      <link>https://zllbird.github.io/2015/11/30/android%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA/</link>
      <pubDate>Mon, 30 Nov 2015 22:25:24 +0800</pubDate>
      
      <guid>https://zllbird.github.io/2015/11/30/android%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA/</guid>
      <description>

&lt;h1 id=&#34;android自动构建发布实践:8595cf9f458882a0b67b0f8cac9fde62&#34;&gt;Android自动构建发布实践&lt;/h1&gt;

&lt;p&gt;首先声明。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;这主要不是讲教程，这是集成过程中遇到的坑！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;这主要不是讲教程，这是集成过程中遇到的坑！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;这主要不是讲教程，这是集成过程中遇到的坑！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;重要的事情说三遍。&lt;/p&gt;

&lt;h3 id=&#34;集成工具:8595cf9f458882a0b67b0f8cac9fde62&#34;&gt;集成工具&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;jenkins (CI)&lt;/li&gt;
&lt;li&gt;Git and GitLab(GitHub同理)&lt;/li&gt;
&lt;li&gt;Gradle (build 工具)&lt;/li&gt;
&lt;li&gt;fir （发布工具）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;工具简单介绍一下，&lt;/p&gt;

&lt;p&gt;jenkins是现在比较主流的CI，也正是因此，上面的插件丰富，涵盖面也很广，更为重要的是，非常容易安装和配置，自然是首选。&lt;/p&gt;

&lt;p&gt;Git 版本管理工具，就不用了讲解了。jenkins同时支持svn。（还是建议大家早点转到git上）公司现在的版本管理使用的是gitlab，类似github(github的迷你版)。&lt;/p&gt;

&lt;p&gt;Gradle是现任Android构建，很是强大。至于grade配置，网上教程很多也很杂乱，建议大家跟随谷歌原版[Gradle 用户指南]()&lt;/p&gt;

&lt;p&gt;这里再推荐一篇，个人认为对Gradle解读很到位的一篇文章。[深入理解gradle]()&lt;/p&gt;

&lt;h3 id=&#34;开始集成:8595cf9f458882a0b67b0f8cac9fde62&#34;&gt;开始集成&lt;/h3&gt;

&lt;p&gt;安装jenkins。&lt;/p&gt;

&lt;p&gt;如果你是mac或者Linux，可以直接通过shell安装（&lt;strong&gt;推荐&lt;/strong&gt; ）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew install jenkins 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果没有brew，先安装Homebrew&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果没有ruby&amp;hellip; 请自行google。&lt;/p&gt;

&lt;p&gt;启动 Jenkins&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ jenkins
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;访问-jenkins:8595cf9f458882a0b67b0f8cac9fde62&#34;&gt;访问 Jenkins&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;请在浏览器输入地址:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    http://localhost:8080/
  
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;使用安装包安装后会自动打开，如果端口冲突那么请修改端口&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    defaults write /Library/Preferences/org.jenkins-ci httpPort xxxx
  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;jenkins最基本的安装就完成了。然后，可以在浏览器输入地址查看一下。看到这样的画面，基本安装就完成了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zllbird.github.io/images/jenkins/initjenkins.png&#34; alt=&#34;initjenkins&#34; /&gt;&lt;/p&gt;

&lt;p&gt;截图里包含两个，一个是通过web端浏览器访问得到的界面。另一个是shell的日志。&lt;/p&gt;

&lt;p&gt;jenkins到此结束。开始使用jenkins，Android的构建之旅吧。&lt;/p&gt;

&lt;h3 id=&#34;jenkins的插件安装:8595cf9f458882a0b67b0f8cac9fde62&#34;&gt;jenkins的插件安装&lt;/h3&gt;

&lt;p&gt;两种方式。这里以安装Git插件为例。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;通过查询安装。&lt;/li&gt;
&lt;li&gt;通过自行下载*.hpi , 然后通过高级安装。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;选择系统管理，然后选择管理插件。 &lt;img src=&#34;https://zllbird.github.io/images/jenkins/initpulgin.png&#34; alt=&#34;initpulgin&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;查询安装:8595cf9f458882a0b67b0f8cac9fde62&#34;&gt;查询安装。&lt;/h4&gt;

&lt;p&gt;在插件管理界面，选择可选插件，然后在右边过滤器里筛选Git或GIT plugin&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zllbird.github.io/images/jenkins/jenkinsgit.png&#34; alt=&#34;jenkinsgit&#34; /&gt;&lt;/p&gt;

&lt;p&gt;然后选择立刻安装。&lt;/p&gt;

&lt;h4 id=&#34;自行下载-hpi-然后通过高级安装:8595cf9f458882a0b67b0f8cac9fde62&#34;&gt;自行下载*.hpi , 然后通过高级安装&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://zllbird.github.io/images/jenkins/jenkinscuston.png&#34; alt=&#34;jenkinscuston&#34; /&gt;&lt;/p&gt;

&lt;p&gt;然后选择上传。&lt;/p&gt;

&lt;h4 id=&#34;遇到的坑:8595cf9f458882a0b67b0f8cac9fde62&#34;&gt;遇到的坑&lt;/h4&gt;

&lt;p&gt;可以说刚开始我是一只使用第一种方法来安装插件的。结果失败率非常高。如果不自备梯子，失败率会更高！&lt;/p&gt;

&lt;p&gt;&lt;em&gt;折腾了很长时间，而且搞得自己心里憔悴。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;所以建议大家通过自己去jenkins的官网或镜像来下载hpi文件自行安装需要的插件。&lt;/p&gt;

&lt;p&gt;还有，自备梯子是一种好习惯。&lt;/p&gt;

&lt;h4 id=&#34;需要安装的插件:8595cf9f458882a0b67b0f8cac9fde62&#34;&gt;需要安装的插件&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;li&gt;Gitlab&lt;/li&gt;
&lt;li&gt;Gitlab Hook (我一直安装不成功，所以自动push event 构建也还未成功)&lt;/li&gt;
&lt;li&gt;Gradle&lt;/li&gt;
&lt;li&gt;fir （官网有详尽的&lt;a href=&#34;http://blog.fir.im/jenkins/&#34;&gt;下载和安装教程&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;到此为止，所有的环境都准备好了。终于可以开动了！&lt;/p&gt;

&lt;h3 id=&#34;自动化构建实例:8595cf9f458882a0b67b0f8cac9fde62&#34;&gt;自动化构建实例&lt;/h3&gt;

&lt;p&gt;jenkins中新建一个项目，命名后，选择 &lt;code&gt;构建一个自由风格的软件项目&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;项目名称。&lt;strong&gt;跳过&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;描述。&lt;strong&gt;跳过&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;… 各种跳过，直接进入源码管理。&lt;/p&gt;

&lt;h4 id=&#34;源码管理:8595cf9f458882a0b67b0f8cac9fde62&#34;&gt;源码管理&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://zllbird.github.io/images/jenkins/jenkinssource.png&#34; alt=&#34;jenkinssource&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这里选的是Git，当然如果你只有现实svn的话，那就是你还没安装Git的插件，具体安装请看上文。&lt;/p&gt;

&lt;p&gt;记住选择构建的分支。（这里是一个只含一个界面调试的项目，所以我直接用了master。&lt;strong&gt;建议，创建一个deploy发布或者debug这样的分支&lt;/strong&gt;，确保每次构建都是可控的。）&lt;/p&gt;

&lt;p&gt;注意到Credentials，这是身份验证。这里直接写了none，也就是说，没有直接验证身份。难道说，我的项目没加任何限制？？？&lt;/p&gt;

&lt;p&gt;当然，不是啦。Git的项目，无论是Github还是自己搭建的Gitlab，大多数都是通过ssh验证的。&lt;/p&gt;

&lt;p&gt;可以点击Credentials 后面的Add 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zllbird.github.io/images/jenkins/jenkinsssh.png&#34; alt=&#34;jenkinsssh&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这样保证jenkins部署的机器的ssh私钥在服务上。&lt;/p&gt;

&lt;h4 id=&#34;构建触发器:8595cf9f458882a0b67b0f8cac9fde62&#34;&gt;构建触发器&lt;/h4&gt;

&lt;p&gt;这就是传说中的&lt;strong&gt;自动构建&lt;/strong&gt;。直接上图讲解。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zllbird.github.io/images/jenkins/jenkinsauto.png&#34; alt=&#34;jenkinsauto&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这里有三种事件触发构建。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build periodically 。 即定时触发，这里我写的是&lt;code&gt;H 10 * * *&lt;/code&gt;，指的就是每天10点触发构建，也就是说，每天10天无论有没有新的代码部署，都会进行构建。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  H 10 * * *
  分 小时 天 月 年
  
  // 五位分别指向轮询事件，这里H 和 0 差不多意思，就是不顾及 分，每天10天构建。
  // * 指忽视
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Build when a change is pushed to GitLab. GitLab CI Service UR… 。这是Gitlab的插件，是gitlab通过事件通知的形式发放。（我测试了很久，感觉这个插件时好时坏，不建议使用）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Poll SCM。 即轮询查询仓库中的代码是否有更新，如果有更新，则进行构建。没有更新，则忽视。这里写的&lt;code&gt;H/5 * * * *&lt;/code&gt;，指每五分钟进行代码扫描。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;H/5  指每五分钟。 这种写法指每这段时间进行轮询
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;构建:8595cf9f458882a0b67b0f8cac9fde62&#34;&gt;构建&lt;/h4&gt;

&lt;p&gt;构建栏中，选增加构建步骤。选择&lt;code&gt;Invoke Gradle script&lt;/code&gt;，当然，如果没有这个选项，就是未安装Gradle插件，然后具体的参数。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zllbird.github.io/images/jenkins/jenkinsbuild.png&#34; alt=&#34;jenkinsbuild&#34; /&gt;&lt;/p&gt;

&lt;p&gt;熟悉Gradle的，很容易看明白，只是执行了了gradle clean build 指令而已。不熟悉的也没关系，我会单独再写一篇关于优化Gradle在安卓上面的部署的 ，以及Gradle使用。&lt;/p&gt;

&lt;h4 id=&#34;构建后操作:8595cf9f458882a0b67b0f8cac9fde62&#34;&gt;构建后操作&lt;/h4&gt;

&lt;p&gt;我这里使用的是fir.im （做的还不错哦）。&lt;/p&gt;

&lt;p&gt;选择增加构建后操作步奏，选择&lt;code&gt;Upload to fir.im&lt;/code&gt;。 &lt;img src=&#34;https://zllbird.github.io/images/jenkins/jenkinsfir.png&#34; alt=&#34;jenkinsfir&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Token 需要注册fir后生成。&lt;/p&gt;

&lt;p&gt;IPA/APK Files ,是可选项。如果不填写，会直接从目录里找。如果填写了，则是会找到需要的目录。&lt;/p&gt;

&lt;p&gt;其他的涉及到测试等方面。不是本文涉及的内容。&lt;/p&gt;

&lt;p&gt;以上全部内容都是在自己mac上执行完成的。&lt;/p&gt;

&lt;p&gt;接下来在Linux上部署。&lt;/p&gt;

&lt;p&gt;到此构建基本完成。&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>日出</title>
      <link>https://zllbird.github.io/2015/11/26/%E6%97%A5%E5%87%BA/</link>
      <pubDate>Thu, 26 Nov 2015 12:57:43 +0800</pubDate>
      
      <guid>https://zllbird.github.io/2015/11/26/%E6%97%A5%E5%87%BA/</guid>
      <description>

&lt;h1 id=&#34;日出:b7b50ec8d4c4b22a378a46c6e304ed09&#34;&gt;日出&lt;/h1&gt;

&lt;h4 id=&#34;5-20:b7b50ec8d4c4b22a378a46c6e304ed09&#34;&gt; 5:20。&lt;/h4&gt;

&lt;p&gt;又一次被梦折磨醒后，望着窗外已经破晓了的天空，我放弃了继续猫在被窝的打算…&lt;/p&gt;

&lt;p&gt;倚在窗前，望着天际。我莫名的有种想看日出的冲动，这种想法一旦冒出便遏制不住。我望了一眼桌子上的钟，5:23。很好，我觉得还不算太坏。现在骑车赶到海边应该还能看到，我开始急忙的收拾行头，准备出发。&lt;/p&gt;

&lt;p&gt;刚穿好衣服，一个念头撞进脑子里。今天天气有日出吗？我急忙拿出手机——阴转多云…&lt;/p&gt;

&lt;p&gt;我心凉了一大截，我又一次走到窗边，看着天际压得很深很深的雾霭，我害怕了。我开始犹豫，开始盘算出去能见到日出的可能性…&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h4 id=&#34;5-28:b7b50ec8d4c4b22a378a46c6e304ed09&#34;&gt;5:28。&lt;/h4&gt;

&lt;p&gt;正当我心神彷徨的时候，我又一次被时间惊醒——5:28。我意识到，我如果再犹豫下去那么和我重新钻进被窝是等价的。然后我问了自己两个问题：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;我想看日出吗？&lt;/li&gt;
&lt;li&gt;现在去还来得及吗？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;然后，我便拿上钥匙出门了。出门前，我随手带了一件外套。到海边后我发觉我的随手是多么的明智。&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h4 id=&#34;5-38:b7b50ec8d4c4b22a378a46c6e304ed09&#34;&gt;5:38。&lt;/h4&gt;

&lt;p&gt;我一路飙车来到海边，当我看到灰蒙蒙的天际的时候，我才恍然我来早了。不过还好，能见度已经非常高了，海岸线上也有着零零散散晨练的老人。&lt;/p&gt;

&lt;p&gt;海风不大，但很凉。我倚在栏杆上怔怔出神，遥遥的望着那头的灯塔。&lt;img src=&#34;https://zllbird.github.io/images/sun/sun520.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;5-40:b7b50ec8d4c4b22a378a46c6e304ed09&#34;&gt;5:40。&lt;/h4&gt;

&lt;p&gt;我又忍不住想去灯塔那里看日出。我急忙用手机查了一下今早日出的时间，5:56。&lt;/p&gt;

&lt;p&gt;我看了一眼手机，又看了一眼灯塔。然后，骑上车，加速…&lt;/p&gt;

&lt;p&gt; &lt;img src=&#34;https://zllbird.github.io/images/sun/sun540.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;5-52:b7b50ec8d4c4b22a378a46c6e304ed09&#34;&gt;5:52.&lt;/h4&gt;

&lt;p&gt;当到达灯塔下的时候，我突然很骄傲。望着那已经泛红的天际，心中满是喜悦。&lt;/p&gt;

&lt;p&gt; &lt;img src=&#34;https://zllbird.github.io/images/sun/sun552.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;6-00:b7b50ec8d4c4b22a378a46c6e304ed09&#34;&gt;6:00&lt;/h4&gt;

&lt;p&gt;我在灯塔旁的亭子里默然的望着早已红透的天空。&lt;/p&gt;

&lt;p&gt;但，厚实的云黑压压的盖住了地平线，似乎在嘲笑我的愚蠢和荒唐。&lt;/p&gt;

&lt;p&gt;天越来越亮，能见度也越来越高。&lt;/p&gt;

&lt;p&gt;但…&lt;/p&gt;

&lt;p&gt; &lt;img src=&#34;https://zllbird.github.io/images/sun/sun600.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;6-10:b7b50ec8d4c4b22a378a46c6e304ed09&#34;&gt;6:10&lt;/h4&gt;

&lt;p&gt;天际的红晕也渐渐的褪去了，大海湛蓝湛蓝的，那么深邃，也那么冷清。&lt;/p&gt;

&lt;p&gt;我仍坐在亭子上遥望着东方。&lt;/p&gt;

&lt;p&gt;心有不甘，但却不愿承认这不甘。因为不愿承认自己已经无可奈何的错过…&lt;/p&gt;

&lt;p&gt; &lt;img src=&#34;https://zllbird.github.io/images/sun/sun610.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;6-13:b7b50ec8d4c4b22a378a46c6e304ed09&#34;&gt;6:13&lt;/h4&gt;

&lt;p&gt;我推着车，安安静静的走下亭子。&lt;/p&gt;

&lt;p&gt;然后，围着灯塔转了一圈又一圈。我开始思考我一早到现在的荒唐行径。&lt;/p&gt;

&lt;p&gt;前两天晚上，我笑话狐狸。估计狐狸看完后，也会笑话我…&lt;/p&gt;

&lt;p&gt;其实，也不必太在意。&lt;strong&gt;人生嘛，就是笑笑别人，然后，再让别人笑笑。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我转过头，又一次凝视着云层。带着那份没捡到日光海岸的失落，骑车驶向西方…&lt;/p&gt;

&lt;p&gt; &lt;img src=&#34;https://zllbird.github.io/images/sun/sun613.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;6-17:b7b50ec8d4c4b22a378a46c6e304ed09&#34;&gt;6:17&lt;/h4&gt;

&lt;p&gt;猛地被一阵惊呼声惊醒，我急忙转过头。深红色的太阳，在云层里挣扎网上挣脱。&lt;/p&gt;

&lt;p&gt;海岸上的所有人都偏过头看着东方。而太阳也似乎在努力地宣言，证明自己的存在。&lt;/p&gt;

&lt;p&gt;它似乎卖力的挤出云层就是想告诉我，你错了。&lt;/p&gt;

&lt;p&gt;我笑了笑，回答道：是的，我错了。你一直存在，只是我没看到而已。&lt;/p&gt;

&lt;p&gt; &lt;img src=&#34;https://zllbird.github.io/images/sun/sun617.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;6-20:b7b50ec8d4c4b22a378a46c6e304ed09&#34;&gt;6:20&lt;/h4&gt;

&lt;p&gt;太阳终于要挣脱云层，而此刻的海也别切成两边。西边是蔚蓝，东方泛着橘红。&lt;/p&gt;

&lt;p&gt;我突然明白为什么那么多人迫切的追求尼康，因为单单用语言的确描绘的那么生涩而无力。&lt;/p&gt;

&lt;p&gt; &lt;img src=&#34;https://zllbird.github.io/images/sun/sun620.jpg&#34; alt=&#34;&#34; /&gt;&lt;img src=&#34;https://zllbird.github.io/images/sun/sun621.jpg&#34; alt=&#34;&#34; /&gt;&lt;img src=&#34;https://zllbird.github.io/images/sun/sun622.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;6-30:b7b50ec8d4c4b22a378a46c6e304ed09&#34;&gt;6:30&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;我们都曾经有过无数的选择，到最后的都是各自性格的宿命。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;但请坚信各自都会到达对的地方，只要为我们的方向奋不顾身过，用尽全力。我们都为我们各自的收获付出了代价，不要羡慕也不要自卑，请每一天，更喜欢自己一些，或者说，每一天，都向着自己所崇拜的人，前进一点。&lt;/p&gt;

&lt;p&gt; &lt;img src=&#34;https://zllbird.github.io/images/sun/sun630.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;6-35:b7b50ec8d4c4b22a378a46c6e304ed09&#34;&gt;6:35&lt;/h4&gt;

&lt;p&gt;我们都在按照自己的方式努力地活着，不断的失望又不断的希望，或许有意义，或许根本没意义。但那样的自己不才是真真正正的自己，不卑微，也不混乱。&lt;/p&gt;

&lt;p&gt;至于我们到底往哪走，怎么走？&lt;/p&gt;

&lt;p&gt;终究只有自己明白，终究只能自己历经。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zllbird.github.io/images/sun/sun635.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;只是，偶尔应该停下来，先看看这个世界。&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>感想 我该如何成长</title>
      <link>https://zllbird.github.io/2015/11/25/%E6%84%9F%E6%83%B3-%E6%88%91%E8%AF%A5%E5%A6%82%E4%BD%95%E6%88%90%E9%95%BF/</link>
      <pubDate>Wed, 25 Nov 2015 09:25:11 +0800</pubDate>
      
      <guid>https://zllbird.github.io/2015/11/25/%E6%84%9F%E6%83%B3-%E6%88%91%E8%AF%A5%E5%A6%82%E4%BD%95%E6%88%90%E9%95%BF/</guid>
      <description>

&lt;h1 id=&#34;感想-我该如何成长:357074d4ca6df4026eb17ea49d9f28f4&#34;&gt;感想-我该如何成长&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;我始终相信，优秀归根到底是自己的事儿，所以成长，归根到底，也是要靠自己。 ——飞鸟&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;几天前和一个朋友聊起学习，又被一阵吐槽。说是被老板压榨，没有时间学习，等等巴拉巴拉&amp;hellip;又突然想起一个同事，总是感慨总是被公司的业务羁绊，向业务妥协。便有了这篇感慨。&lt;/p&gt;

&lt;p&gt;然后，我很认真的问自己，我该如何成长？&lt;/p&gt;

&lt;p&gt;想明白这个问题之前，应该先想明白另一个问题。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;我到底想成为一个什么样子的人？&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;相信自己而不是相信依靠:357074d4ca6df4026eb17ea49d9f28f4&#34;&gt;相信自己而不是相信依靠&lt;/h3&gt;

&lt;p&gt;有个同事说起这么一番话，我直接抄过来了。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在思路上, 技术大牛确实给了很多启发, 甚至可以说不是技术细节的启发, 对我来说都是颠覆性的想法, 这些思路靠自己研究, 并且又在业务迭代的压力下几乎是不可能的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我其实很承认这句话的。尤其是和一些优秀和专研的人聊天，往往听完后，第一感觉就是听君一席话，胜读十年书啊。（当然，不仅仅局限技术大牛。）&lt;/p&gt;

&lt;p&gt;可惜的是，倾听我准备好了，求教我也准备好了，该准备的都准备好了。正所谓万事俱备，只缺一个技术大牛。&lt;/p&gt;

&lt;p&gt;好吧，有能指点的技术大牛是幸运的。但如果没有，其实也没那么糟糕。因为这个时代不仅不缺技术大牛，而且大牛们都还很喜欢分享。想想中国古代的老师傅们，总要留一手，不让本事全被徒弟学去了，而如今的大牛们，恨不得把自己的会的全都拿出来让你看看。&lt;strong&gt;（我一直庆幸自己能在这样一个时代里去拼搏&lt;/strong&gt;。）&lt;/p&gt;

&lt;p&gt;所以金山银山颜如玉神马的都有，只不过那些让你醍醐灌顶的指点都散落在网络上各处，只不过这次是需要你自己去找。&lt;/p&gt;

&lt;p&gt;我想说的是，不要去依赖，如果非要依赖，也只能依赖自己，相信自己。&lt;/p&gt;

&lt;h3 id=&#34;有捷径请走捷径-如果没有-请更加努力:357074d4ca6df4026eb17ea49d9f28f4&#34;&gt;有捷径请走捷径，如果没有，请更加努力&lt;/h3&gt;

&lt;p&gt;不得不承认，有人带着学习或者成长，会比自己摸石过河要快很多，少犯错，少走路。我是一个捷径主义者，所以，那些所谓打基础啊，吃亏是福啊，这是一种锻炼啊之类的话，我都认为是扯淡。&lt;/p&gt;

&lt;p&gt;聊点题外话，中学化学有一种推断ABCDEF是什么物质的题，大概是下面这个样子。每次做这种题，我都直接把出现最多的字母当成O，氧气。或者遇到无色透明液体，我直接就写成水。然后再一推断，一两分钟就能解决这个题。这个方法我从初三一路用到高考都不带失手的。捷径这么好用，为啥不用呢。&lt;/p&gt;

&lt;p&gt;聊完题外。回来说说，如果真没有人带，需要自己摸黑，走一步算一步的时候，我只能说。请更加努力，请更加劳苦，虽没有捷径可走，但至少还可以多付出。&lt;/p&gt;

&lt;h3 id=&#34;完美这个伪命题:357074d4ca6df4026eb17ea49d9f28f4&#34;&gt;完美这个伪命题&lt;/h3&gt;

&lt;p&gt;从小在做生意的人堆里长大，所以听到被人说：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;只是单纯而简单的钻研技术, 把每个模块每个函数写到自己觉得完美.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这样的话。我就很不舒服。在我心里大概有这么一个评级，不足，足够，优秀，完美。而我呢，是一个追求优秀，但忌惮完美的人。我潜意识里，完美等于巨大的物力，人力，财力，以及时间，一句话——高额成本！一旦遇到高额成本，我就会吓得慌。&lt;/p&gt;

&lt;p&gt;也怪我太贪心，不够专注。或者猎奇心太重，总想着尝试新的技术，新的东西，新的领域。所以，在我看来去追求完美，真的太浪费了。不是有句名言这么说的&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;不追求完美，何尝不是一种放下。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;刚开始学习JAVA的时候，对各种设计模式学习，那叫一个如此如醉，奉若神技。但随着时间慢慢过去，现在反倒觉得那么多设计模式，何尝不是一种累赘。一方面，写出的代码怎么看都觉得有那么点相似，另一方面，有一种变相的冗长。再后来，接触了javascript，python等后，（现在学习Go中），越发着发觉，所谓的设计模式，本质上是Java语言本身的内建不够啊。&lt;/p&gt;

&lt;p&gt;想明白这点后，设计模式就再也不神秘了。好像又写的有点跑题了，回到完美这个梗。Java本身是有缺陷的，所以已阻止了完美的步伐，或者这样说：用Java写了一个&lt;strong&gt;完美的&lt;/strong&gt;方法，模块。但这种完美却很脆弱。脆弱到，一不小心，被时代淘汰了。&lt;/p&gt;

&lt;p&gt;时代太快了，快的让我不敢只专注于一项技巧与一种语言。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android自定义属性使用</title>
      <link>https://zllbird.github.io/2015/11/23/android%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 23 Nov 2015 16:49:45 +0800</pubDate>
      
      <guid>https://zllbird.github.io/2015/11/23/android%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7%E4%BD%BF%E7%94%A8/</guid>
      <description>

&lt;h1 id=&#34;android自定义属性使用以及注意事项:3bdf756234a6e48d25bbfd7dc8dacd4b&#34;&gt;Android自定义属性使用以及注意事项&lt;/h1&gt;

&lt;p&gt;自定义控件和自定义属性是安卓开发过程中实现个性化的一个很好技巧，也是对sdk中UI部分的使用更加灵活的部分。这部分主要实现自定义属性，自定义控件的文档正在完善中。&lt;/p&gt;

&lt;h3 id=&#34;如何实现:3bdf756234a6e48d25bbfd7dc8dacd4b&#34;&gt;如何实现：&lt;/h3&gt;

&lt;h4 id=&#34;a-在配置文件中声明:3bdf756234a6e48d25bbfd7dc8dacd4b&#34;&gt;a) 在配置文件中声明。&lt;/h4&gt;

&lt;p&gt;虽说在value中哪个文件里都是一样（保证在resources标签下就行)，但作为一个有志向的开发者，良好的文件管理习惯是必须的，so，在values中创建一个名为：&lt;code&gt;attrs.xml&lt;/code&gt;来统一管理自定义属性。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;resources&amp;gt;
  &amp;lt;declare-styleable name=&amp;quot;ImageTextView&amp;quot;&amp;gt;
        &amp;lt;attr name=&amp;quot;select_src&amp;quot; format=&amp;quot;reference&amp;quot; /&amp;gt;
        &amp;lt;attr name=&amp;quot;normal_src&amp;quot; format=&amp;quot;reference&amp;quot; /&amp;gt;
        &amp;lt;attr name=&amp;quot;select_text_color&amp;quot; format=&amp;quot;color&amp;quot; /&amp;gt;
        &amp;lt;attr name=&amp;quot;normal_text_color&amp;quot; format=&amp;quot;color&amp;quot; /&amp;gt;
        &amp;lt;attr name=&amp;quot;image_text_padding&amp;quot; format=&amp;quot;dimension&amp;quot;/&amp;gt;
        &amp;lt;attr name=&amp;quot;android:textSize&amp;quot;/&amp;gt;
        &amp;lt;attr name=&amp;quot;android:layout_gravity&amp;quot; /&amp;gt;
        &amp;lt;attr name=&amp;quot;android:text&amp;quot; /&amp;gt;
    &amp;lt;/declare-styleable&amp;gt;
&amp;lt;/resources&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自定义属性的声明是通过子标签&lt;code&gt;declare-styleable&lt;/code&gt;声明了大的样式，具体的属性是通过&lt;code&gt;attr&lt;/code&gt;来声明，声明包含属性名和格式（具体是属性值的格式，一般有reference，color，integer，float，dimension，boolean，string等，当然还有enum，如果是枚举的话要继续声明具体的枚举），如果对于自定义控件来说，某些属性就是已经android声明的属性，就可以在&lt;code&gt;name&lt;/code&gt;后面直接写明使用android：声明的哪个属性（简单吧）。&lt;/p&gt;

&lt;h4 id=&#34;b-在自定义控件xml中使用:3bdf756234a6e48d25bbfd7dc8dacd4b&#34;&gt;b) 在自定义控件xml中使用&lt;/h4&gt;

&lt;p&gt;（主要是讲解自定义属性，所以这里的自定义控件较为简单，就是一个imageview + textview的组合）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;com.android.lesdo.view.UpImageTextView
	//声明使用app来定义自定义属性名，当然这个命名是你确定的。
    xmlns:app=&amp;quot;http://schemas.android.com/apk/res-auto&amp;quot;
    android:id=&amp;quot;@+id/iv&amp;quot;
    android:layout_width=&amp;quot;wrap_content&amp;quot;
    android:layout_height=&amp;quot;wrap_content&amp;quot;
    android:text = &amp;quot;Hello&amp;quot;
    android:textSize = &amp;quot;14sp&amp;quot;
    android:layout_marginRight=&amp;quot;59dp&amp;quot;
    // 使用刚才已经在arrts里声明好的属性
    app:select_src = &amp;quot;@drawable/searchuser_t_pressed&amp;quot; 
    app:normal_src = &amp;quot;@drawable/searchuser_t_normal&amp;quot;
    app:select_text_color = &amp;quot;@color/green&amp;quot;
    app:normal_text_color = &amp;quot;@color/content&amp;quot;
    app:image_text_padding = &amp;quot;7dp&amp;quot;
    /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当然，你也可以声明android本来的属性，一样可以使用（具体在自定义控件里说明）。&lt;/p&gt;

&lt;h4 id=&#34;c-在自定义控件-java类-中读取属性使用:3bdf756234a6e48d25bbfd7dc8dacd4b&#34;&gt;c) 在自定义控件（java类）中读取属性使用&lt;/h4&gt;

&lt;p&gt;最后的使用。&lt;/p&gt;

&lt;p&gt;自定义控件大多数要继承原本的&lt;code&gt;Imageview&lt;/code&gt; ，&lt;code&gt;TextView&lt;/code&gt; ，&lt;code&gt;FrameLayout&lt;/code&gt;等，当然直接继承View也是一样的，只不过直接继承View和ViewGroup的灵活性太高，一般用不到。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public UpImageTextView(Context context, AttributeSet attrs, int defStyleAttr) {
    super(context, attrs, defStyleAttr);
    // 加载布局文件
    LayoutInflater.from(context).inflate(R.layout.down_text_image,this);
        imageView = (ImageView) findViewById(R.id.image);
        textView = (TextView) findViewById(R.id.text);

    // 获取属性集
  	// 这里获取的就是我们再res 下value中声明的ImageTextView属性集
  	// 当然是由IDE自动在R文件中生成的。
        final TypedArray a = context.obtainStyledAttributes(
                attrs, R.styleable.ImageTextView);

    // 通过声明的format 就可以定向获取到属性
  	// R.styleable 都是自动生成的，具体属性名都是跟在声明的style名字后面的
  	// R.styleable.ImageTextView_normal_src对应的就是 arrts.xml中的
  	// &amp;lt;attr name=&amp;quot;normal_src&amp;quot; format=&amp;quot;reference&amp;quot; /&amp;gt;

       int selectRes = a.getResourceId(R.styleable.ImageTextView_select_src,0);
       int normalRes = a.getResourceId(R.styleable.ImageTextView_normal_src,0);
       int selectTextColor = a.getResourceId(R.styleable.ImageTextView_select_text_color,R.color.green);
       int normalTextColor = a.getResourceId(R.styleable.ImageTextView_normal_text_color, R.color.title);
      int textSize = a.getDimensionPixelSize(R.styleable.ImageTextView_android_textSize, 0);
        int image_text_padding = a.getDimensionPixelOffset(R.styleable.ImageTextView_image_text_padding,0);
        String text = a.getString(R.styleable.ImageTextView_android_text);

        a.recycle();
        imageView.setImageResource(normalRes);
        textView.setTextColor(getResources().getColor(normalTextColor));
        textView.setTextSize(TypedValue.COMPLEX_UNIT_PX, textSize);
        textView.setText(text);
        textView.setPadding(0,image_text_padding,0,0);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;依次获取属性，然后使用。弹药注意的是，获取完自定义或者本身的属性后，一定要将&lt;code&gt;final TypedArray a&lt;/code&gt;返回到用之前的状态，可以看到&lt;code&gt;TypedArray&lt;/code&gt;是context中获取的，它是一个环境中统一使用的，所以用完记得要还。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt; a.recycle();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意的坑：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt; int textSize = a.getDimensionPixelSize(R.styleable.ImageTextView_android_textSize, 0);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里获取的 ，单位是&lt;strong&gt;sp&lt;/strong&gt;得值 ，单位是&lt;strong&gt;sp&lt;/strong&gt;得值 ，单位是&lt;strong&gt;sp&lt;/strong&gt;得值！！！&lt;/p&gt;

&lt;p&gt;所以使用的时候记得加上&lt;code&gt;TypedValue&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;textView.setTextSize(TypedValue.COMPLEX_UNIT_PX, textSize);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Android Transition 学习心得</title>
      <link>https://zllbird.github.io/2015/11/12/android-transition-%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/</link>
      <pubDate>Thu, 12 Nov 2015 15:40:32 +0800</pubDate>
      
      <guid>https://zllbird.github.io/2015/11/12/android-transition-%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/</guid>
      <description>

&lt;h1 id=&#34;android-transition-学习心得:197eea1a2f41ae8a1e21912c062e6b04&#34;&gt;Android Transition 学习心得&lt;/h1&gt;

&lt;p&gt;Android 5.0之后。Transition 被更多的应用起来，support也对其越来越多得支持。这种大背景下，各种动画的学习便是必不可少的了。而其中Transition便是其中的佼佼者。&lt;/p&gt;

&lt;p&gt;下面是比较详细的介绍和应用实践，我也是主要通过这个项目学习，但强烈建议，只先通看文档，别上来直接就照着写（还有看完后，记得回来啊！！！）：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/lgvalle/Material-Animations&#34;&gt;Material-Animations&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;看完后，我那叫一个心血澎湃。但按住心情，现在才是真正意义上的开始学习。&lt;/p&gt;

&lt;p&gt;我学习的过程，大概分以下几部分，可以做个参考，也非常欢迎大家的质疑和讨论。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;先运行Demo或者Examples代码，运行结果ok后，认真研读代码。&lt;em&gt;我始终认为，读一个轻量，但完整的工程代码，是快速学习的最有效的途径&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;对关键API(类和方法)的学习。&lt;em&gt;知其然，也必须，知其所以然&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;尝试代码。&lt;em&gt;写代码千万不要粘贴，千万不要忘记配置文件，android中千万不要忘记style等&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;activity跳转:197eea1a2f41ae8a1e21912c062e6b04&#34;&gt;Activity跳转&lt;/h3&gt;

&lt;h4 id=&#34;1-activity跳转都是需要添加-window-属性:197eea1a2f41ae8a1e21912c062e6b04&#34;&gt;1)Activity跳转都是需要添加&lt;code&gt;window&lt;/code&gt;属性。&lt;/h4&gt;

&lt;p&gt;配置文件：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;style name=&amp;quot;MaterialAnimations&amp;quot; parent=&amp;quot;@style/Theme.AppCompat.Light.NoActionBar&amp;quot;&amp;gt;
  ...
  //添加window开启Transtions动画属性
  &amp;lt;item name=&amp;quot;android:windowContentTransitions&amp;quot;&amp;gt;true&amp;lt;/item&amp;gt; 

  //是否覆盖执行，其实可以理解成是否同步执行还是顺序执行
  &amp;lt;item name=&amp;quot;android:windowAllowEnterTransitionOverlap&amp;quot;&amp;gt;false&amp;lt;/item&amp;gt;
  &amp;lt;item name=&amp;quot;android:windowAllowReturnTransitionOverlap&amp;quot;&amp;gt;false&amp;lt;/item&amp;gt;
  ...
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当然，也可以直接在代码里写&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt; getWindow().requestFeature(Window.FEATURE_CONTENT_TRANSITIONS);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不过不建议在代码里写，因为现在使用Support v7 比较多，所以，不是直接原生的Activity，会又很多莫名其妙的错误。&lt;/p&gt;

&lt;h4 id=&#34;2-配置进出动画:197eea1a2f41ae8a1e21912c062e6b04&#34;&gt;2)配置进出动画&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private void setupWindowAnimations() {
    // Re-enter transition is executed when returning to this activity
    Slide slideTransition = new Slide();
    slideTransition.setSlideEdge(Gravity.LEFT);
 slideTransition.setDuration(getResources().getInteger(R.integer.anim_duration_long));
    getWindow().setReenterTransition(slideTransition); // 5.0以后的方法
    getWindow().setExitTransition(slideTransition); // 5.0以后的方法
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-启动页面跳转:197eea1a2f41ae8a1e21912c062e6b04&#34;&gt;3)启动页面跳转&lt;/h4&gt;

&lt;p&gt;这里需要注意的跳转的时候&lt;strong&gt;一定一定一定&lt;/strong&gt;要配置ActivityOption。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 配置这个option必不可少
ActivityOptions options = ActivityOptions.makeSceneTransitionAnimation(activity,view,shareName);
startActivity(intent,options.toBundle());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当然，现在用support已经成为主流，下面是v4提供的支持类，用法相同&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 配置这个option必不可少
ActivityOptionsCompat options = ActivityOptionsCompat.makeSceneTransitionAnimation(activity,view,shareName);
startActivity(intent,options.toBundle());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;好了，基本Activity的跳转就实现了。官方提供了三种实践，&lt;strong&gt;Explode&lt;/strong&gt;, &lt;strong&gt;Slide&lt;/strong&gt; 和&lt;strong&gt;Fade&lt;/strong&gt;，分别是上下拉开，上下左右滑入滑出，以及淡出淡入等。&lt;/p&gt;

&lt;h3 id=&#34;shareelement共享元素:197eea1a2f41ae8a1e21912c062e6b04&#34;&gt;ShareElement共享元素&lt;/h3&gt;

&lt;p&gt;不同界面的相同元素，进行跳转的时候，共联跳转，看起来简直是舒服到不行。也是我学习TransitionAnimation最大的动力。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/lgvalle/Material-Animations&#34;&gt;Material-Animations&lt;/a&gt;中有非常详细的介绍实现。&lt;/p&gt;

&lt;p&gt;我整体试了一下，发觉使用&lt;code&gt;Fragment&lt;/code&gt;比使用&lt;code&gt;Activity&lt;/code&gt;动画不仅连贯很多，而且整体感更强。而且，&lt;code&gt;Fragment&lt;/code&gt;的API对Transtion更加的亲善。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Transition for fragment1
Slide slideTransition = new Slide(Gravity.LEFT); 
slideTransition.setDuration(getResources().getInteger(R.integer.anim_duration_long));
// Create fragment and define some of it transitions
SharedElementFragment1 sharedElementFragment1 = SharedElementFragment1.newInstance(sample);
// 下面这几个方法都是Fragment的方法，可见Google已经建议使用Fragment，进行共享元素跳转是相当好的体验
sharedElementFragment1.setReenterTransition(slideTransition); 
sharedElementFragment1.setExitTransition(slideTransition);
sharedElementFragment1.setSharedElementEnterTransition(new ChangeBounds());

getSupportFragmentManager().beginTransaction()
        .replace(R.id.sample2_content, sharedElementFragment1)
        .commit();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Google建议，使用Fragment去承载UI界面，Activity主要承载操作Fragment。因此，关于跳转，也强烈建议使用上面的实践。&lt;/p&gt;

&lt;h3 id=&#34;view动画:197eea1a2f41ae8a1e21912c062e6b04&#34;&gt;View动画&lt;/h3&gt;

&lt;h4 id=&#34;scenes:197eea1a2f41ae8a1e21912c062e6b04&#34;&gt;Scenes&lt;/h4&gt;

&lt;p&gt;在一个界面内（Activity or Fragment）实现动画，就需要&lt;code&gt;scenes&lt;/code&gt;，这个scene，翻译成视图，结果图都觉得很别扭，我就这么解释，scene是一种静态或者结果状态，就是最后是啥样子的。如果是位移动画，相当于初始位置的图，和运动完后的位置图。然后由，&lt;code&gt;TransitionManager&lt;/code&gt;最后调用，go方法，他就跑起来了。&lt;/p&gt;

&lt;p&gt;详细请看项目中的&lt;code&gt;AnimationsActivity2&lt;/code&gt;类，核心代码是：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;cene1 = Scene.getSceneForLayout(sceneRoot, R.layout.activity_animations_scene1, this);
scene2 = Scene.getSceneForLayout(sceneRoot, R.layout.activity_animations_scene2, this);
scene3 = Scene.getSceneForLayout(sceneRoot, R.layout.activity_animations_scene3, this);
scene4 = Scene.getSceneForLayout(sceneRoot, R.layout.activity_animations_scene4, this);

View button1 = findViewById(R.id.sample3_button1);
button1.setOnClickListener(new View.OnClickListener() {
    @Override
    public void onClick(View v) {
        TransitionManager.go(scene1, new ChangeBounds());
    }
});
View button2 = findViewById(R.id.sample3_button2);
button2.setOnClickListener(new View.OnClickListener() {
    @Override
    public void onClick(View v) {
        TransitionManager.go(scene2, TransitionInflater.from(AnimationsActivity2.this).inflateTransition(R.transition.slide_and_changebounds));
    }
});

View button3 = findViewById(R.id.sample3_button3);
button3.setOnClickListener(new View.OnClickListener() {
    @Override
    public void onClick(View v) {
        TransitionManager.go(scene3, TransitionInflater.from(AnimationsActivity2.this).inflateTransition(R.transition.slide_and_changebounds_sequential));
    }
});

View button4 = findViewById(R.id.sample3_button4);
button4.setOnClickListener(new View.OnClickListener() {
    @Override
    public void onClick(View v) {
        TransitionManager.go(scene4, TransitionInflater.from(AnimationsActivity2.this).inflateTransition(R.transition.slide_and_changebounds_sequential_with_interpolators));
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;view-属性改变引起的动画:197eea1a2f41ae8a1e21912c062e6b04&#34;&gt;View 属性改变引起的动画&lt;/h4&gt;

&lt;p&gt;这个就有点变态了，你更改了空间的layout属性，告诉Transtion一声，他就做成动画反馈在界面上。听起来就很叼！&lt;/p&gt;

&lt;p&gt;实现起来非常非常的简单，简单到想哭。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private void changeLayout() {

  // 声明，由Transition接管界面变化的意思，这里的viewRoot相当于根视图，
  // 也就是说，想改变layout布局的view,父类要先被接管
    TransitionManager.beginDelayedTransition(viewRoot);

    ViewGroup.LayoutParams params = square.getLayoutParams();
    if (sizeChanged) {
        params.width = savedWidth;
    } else {
        savedWidth = params.width;
        params.width = 200;
    }
    sizeChanged = !sizeChanged;
    square.setLayoutParams(params);
}

private void changePosition() {
    TransitionManager.beginDelayedTransition(viewRoot);

    LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams) square.getLayoutParams();
    if (positionChanged) {
        lp.gravity = Gravity.CENTER;
    } else {
        lp.gravity = Gravity.LEFT;
    }
    positionChanged = !positionChanged;
    square.setLayoutParams(lp);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;相信，介于此，5.0后的android上很多用户体验能提升一大截。&lt;/p&gt;

&lt;h3 id=&#34;reveal-揭示动画:197eea1a2f41ae8a1e21912c062e6b04&#34;&gt;Reveal，揭示动画&lt;/h3&gt;

&lt;p&gt;这也是相当符合设计一种动画，通过一点引发触动（可以是接触点，也可以位移后触动），然后由点及面，揭示（展现）内容。&lt;/p&gt;

&lt;p&gt;一般都是通过shared elements一起组合使用，完成界面跳转。&lt;/p&gt;

&lt;p&gt;Circular Reveal 即通过原点，然后由点及面逐步揭示，而且还有一个弧度，视觉体验感非常好。&lt;/p&gt;

&lt;p&gt;这里要用到&lt;code&gt;ViewAnimationUtils&lt;/code&gt;类（这个类里承载了很多动画，非常还用!）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 揭示原点，这里的点取的是控件的中点
int cx = (viewRoot.getLeft() + viewRoot.getRight()) / 2;
int cy = (viewRoot.getTop() + viewRoot.getBottom()) / 2;
int finalRadius = Math.max(viewRoot.getWidth(), viewRoot.getHeight()); // 揭示弧度

// 获得动画
Animator anim = ViewAnimationUtils.createCircularReveal(viewRoot, cx, cy, 0, finalRadius);

// 这里更改动画，是为了看到的揭示能比较清楚
viewRoot.setBackgroundColor(color);
anim.addListener(new AnimatorListenerAdapter() {
    @Override
    public void onAnimationEnd(Animator animation) {
        animateButtonsIn();
    }
});
anim.start();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果不是由控件引起的，而是由点击（其实就是触摸）引起的，只需要传入接触点的x,y坐标就好了。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Override
public boolean onTouch(View view, MotionEvent motionEvent) {
    if (motionEvent.getAction() == MotionEvent.ACTION_DOWN) {
        if (view.getId() == R.id.square_yellow) {
            revealFromCoordinates(motionEvent.getRawX(), motionEvent.getRawY());
        }
    }
    return false;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private Animator animateRevealColorFromCoordinates(int x, int y) {

    float finalRadius = (float) Math.hypot(viewRoot.getWidth(), viewRoot.getHeight());

    Animator anim = ViewAnimationUtils.createCircularReveal(viewRoot, x, y, 0, finalRadius);
    viewRoot.setBackgroundColor(color);
    anim.start();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;刚才提到的改变layout属性，就可以改变动画其实也是可以用到圆揭示：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Transition transition = TransitionInflater.from(this).inflateTransition(R.transition.changebounds_with_arcmotion);
transition.addListener(new Transition.TransitionListener() {
    @Override
    public void onTransitionEnd(Transition transition) {
        animateRevealColor(bgViewGroup, R.color.red);
    }
    (...)

});
//接管后，传入想要改变的动画
TransitionManager.beginDelayedTransition(bgViewGroup, transition);
RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
layoutParams.addRule(RelativeLayout.CENTER_IN_PARENT);
btnRed.setLayoutParams(layoutParams);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;总结:197eea1a2f41ae8a1e21912c062e6b04&#34;&gt;总结&lt;/h3&gt;

&lt;p&gt;写的比较简单，很多东西还是对API的熟悉和使用。&lt;/p&gt;

&lt;p&gt;Material 正在改变Android，相信以后的UI无论从实感还是物理感，都会更加贴合用户，贴近使用。&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>Git清理误传的文件</title>
      <link>https://zllbird.github.io/2015/11/11/git%E6%B8%85%E7%90%86%E8%AF%AF%E4%BC%A0%E7%9A%84%E6%96%87%E4%BB%B6/</link>
      <pubDate>Wed, 11 Nov 2015 09:53:37 +0800</pubDate>
      
      <guid>https://zllbird.github.io/2015/11/11/git%E6%B8%85%E7%90%86%E8%AF%AF%E4%BC%A0%E7%9A%84%E6%96%87%E4%BB%B6/</guid>
      <description>

&lt;h1 id=&#34;git清理误传的文件:2c3299dc152aba749c72550a3d365541&#34;&gt;Git清理误传的文件&lt;/h1&gt;

&lt;p&gt;​   Git进行版本管理的时候，项目中很多文件(配置文件，自动生成文件，构建生成文件，依赖包等)是不需要同步上传到服务器。一方面，造成文件的多余，另一方面，如本地配置文件（&lt;code&gt;local.properties&lt;/code&gt;），不同人员的来回提交，则会造成同步开发人员的版本混乱——不断地解决重复冲突，这是相当不值得的。&lt;/p&gt;

&lt;p&gt;​   Git提供了一种忽略机制——gitignore。本质上也是一种Git配置，类似于配置文件。将配置文件中相关文件忽略，写法与Android工程是熟悉的混淆配置文件（&lt;code&gt;proguard-rules.pro&lt;/code&gt;）非常相似。功能也是将&lt;code&gt;.gitignore&lt;/code&gt;里面配置好的文件忽略，或者说是剔除，不让此文件加入版本控制。&lt;/p&gt;

&lt;p&gt;​   关于gitignore的详细介绍请&lt;a href=&#34;http://git.oschina.net/progit/&#34;&gt;参考这里,第二章基础&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;​   显然，对于我这种Git新手，很可能知道这些的时候，已经把配置文件都扔到服务器上了。然后，一阵胡搞乱搞…（都是满纸辛酸泪），其实根本原因还是对Git本身理解不够。接下来，简单介绍一下做法，以及远离。&lt;/p&gt;

&lt;p&gt;​   解决步奏：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;将配置文件文件名（如&lt;code&gt;local.properties&lt;/code&gt;）放到.gitignore里。&lt;/li&gt;
&lt;li&gt;检查工作空间里是否还有这个文件（如，在配置文件里随便改点，然后，git status检查工作空间里是否存在）&lt;/li&gt;
&lt;li&gt;如果不存在，你可以关掉网页了。如果存在，备份，然后删除它！！！（直接在shell里rm）&lt;/li&gt;
&lt;li&gt;然后 add , commit ,push 一套走下来。&lt;/li&gt;
&lt;li&gt;查看远程git服务器端也没有这个文件。&lt;/li&gt;
&lt;li&gt;然后，把刚才备份的文件拿回来。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;写到这，突然觉得自己好无聊啊好无聊，这么特么的不就是删了就完了。好吧，我承认，这就是&amp;hellip;&lt;/p&gt;

&lt;p&gt;接下来说说我的理解，Git的版本控制其实本质上是对文件的操作跟踪。所以，一旦进入了版本控制，跟踪系统就会去记录它（这个文件）上发生的所有操作，即便把它放到忽略文件里也同样。因为忽略是晚于跟踪的，也就是说，只有未被跟踪的文件才有被忽略的权利。&lt;/p&gt;

&lt;p&gt;下面是 git status 中对于修改的文件和刚刚加入的文件的显示&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zllbird.github.io/images/git-untruck.png&#34; alt=&#34;git-untruck&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这个时候，上面两个文件是无法被忽略的，而add.txt，是可以被忽略的。&lt;/p&gt;

&lt;p&gt;这也刚才我们必须先删除，再拿回来的原因。&lt;/p&gt;

&lt;p&gt;附上Android常用的.gitgnore。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# built application files
*.ap_

# files for the dex VM
*.dex
*.iml

# Java class files
*.class

# generated files
bin/
gen/
*target/
*build/
*build*
.gradle/
.idea/

gen-external-apklibs/

# Local configuration file (sdk path, etc)
/library_wheel/build
local.properties

# Eclipse project files
.classpath
.project

# Mac os
.DS_Store

# DEBUG
captures/
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>second</title>
      <link>https://zllbird.github.io/2015/11/03/second/</link>
      <pubDate>Tue, 03 Nov 2015 15:08:38 +0800</pubDate>
      
      <guid>https://zllbird.github.io/2015/11/03/second/</guid>
      <description>

&lt;h1 id=&#34;想试一下自动部署脚本:9f7936f9b5c071ae81db818b80a44a0d&#34;&gt;想试一下自动部署脚本&lt;/h1&gt;

&lt;p&gt;还有大师傅的歌真的很不好听~~~&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>执着</title>
      <link>https://zllbird.github.io/2015/11/02/%E6%89%A7%E7%9D%80/</link>
      <pubDate>Mon, 02 Nov 2015 16:35:33 +0800</pubDate>
      
      <guid>https://zllbird.github.io/2015/11/02/%E6%89%A7%E7%9D%80/</guid>
      <description>

&lt;h2 id=&#34;只是执着而已:c569c2cd856bd99d2e5fbc2283c59759&#34;&gt;只是执着而已&lt;/h2&gt;

&lt;p&gt;最近，&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>